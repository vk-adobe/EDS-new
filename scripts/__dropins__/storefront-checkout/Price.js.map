{"version":3,"file":"Price.js","sources":["../../ElsieSDK/packages/elsie/src/components/Price/Price.tsx"],"sourcesContent":["import { FunctionComponent } from 'preact';\nimport { HTMLAttributes, useMemo } from 'preact/compat';\nimport { classes } from '@adobe/elsie/lib';\nimport '@adobe/elsie/components/Price/Price.css';\n\nexport interface PriceProps\n  extends Omit<HTMLAttributes<HTMLSpanElement>, 'size'> {\n  amount?: number;\n  currency?: string;\n  locale?: string;\n  formatOptions?: {\n    [key: string]: any;\n  };\n  variant?: 'default' | 'strikethrough';\n  weight?: 'bold' | 'normal';\n  sale?: boolean;\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport const Price: FunctionComponent<PriceProps> = ({\n  amount = 0,\n  currency,\n  locale = undefined,\n  variant = 'default',\n  weight = 'bold',\n  className,\n  children,\n  sale = false,\n  formatOptions = {},\n  size = 'small',\n  ...props\n}) => {\n  const formatter = useMemo(\n    () =>\n      new Intl.NumberFormat(locale, {\n        style: 'currency',\n        currency: currency || 'USD',\n        // These options are needed to round to whole numbers if that's what you want.\n        minimumFractionDigits: 2, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n        maximumFractionDigits: 2, // (causes 2500.99 to be printed as $2,501)\n        ...formatOptions,\n      }),\n    [locale, currency, formatOptions]\n  );\n\n  const formattedAmount = useMemo(() => formatter.format(amount), [amount, formatter])\n\n  return (\n    <span\n      {...props}\n      className={classes([\n        'dropin-price',\n        `dropin-price--${variant}`,\n        `dropin-price--${size}`,\n        `dropin-price--${weight}`,\n        ['dropin-price--sale', sale],\n        className,\n      ])}\n    >\n      {formattedAmount}\n    </span>\n  );\n};\n"],"names":["Price","amount","currency","locale","undefined","variant","weight","className","children","sale","formatOptions","size","props","formatter","useMemo","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formattedAmount","format","_jsx","classes"],"mappings":"8JAmBO,MAAMA,EAAuCA,CAAC,CACnDC,OAAAA,EAAS,EACTC,SAAAA,EACAC,OAAAA,EAASC,OACTC,QAAAA,EAAU,UACVC,OAAAA,EAAS,OACTC,UAAAA,EACAC,SAAAA,EACAC,KAAAA,EAAO,GACPC,cAAAA,EAAgB,CAAC,EACjBC,KAAAA,EAAO,QACP,GAAGC,CACL,IAAM,CACJ,MAAMC,EAAYC,EAChB,IACE,IAAIC,KAAKC,aAAab,EAAQ,CAC5Bc,MAAO,WACPf,SAAUA,GAAY,MAEtBgB,sBAAuB,EACvBC,sBAAuB,EACvB,GAAGT,CACJ,CAAA,EACH,CAACP,EAAQD,EAAUQ,CAAa,CAClC,EAEMU,EAAkBN,EAAQ,IAAMD,EAAUQ,OAAOpB,CAAM,EAAG,CAACA,EAAQY,CAAS,CAAC,EAEnF,OACES,EAAA,OAAA,CAAA,GACMV,EACJL,UAAWgB,EAAQ,CACjB,eACC,iBAAgBlB,CAAQ,GACxB,iBAAgBM,CAAK,GACrB,iBAAgBL,CAAO,GACxB,CAAC,qBAAsBG,CAAI,EAC3BF,CAAS,CACV,EAAEC,SAEFY,CAAAA,CACG,CAEV"}