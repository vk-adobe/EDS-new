{"version":3,"file":"initialize.js","sources":["../../ElsieSDK/packages/elsie/src/lib/initializer.ts","../../ElsieSDK/packages/elsie/src/lib/config.ts","../src/api/initialize/initialize.ts"],"sourcesContent":["import { Config, setImageParamsKeyMap } from '@adobe/elsie/lib';\n\ntype Listener = { off(): void };\n\ntype Listeners<T> = (config?: T) => Array<Listener | undefined>;\n\ntype Init<T> = (config?: T) => Promise<void>;\n\ntype Options<T> = { init: Init<T>; listeners: Listeners<T> };\n\nexport class Initializer<T> {\n  private _listeners: Listener[] = [];\n  listeners: Listeners<T>;\n  init: Init<T>;\n  config = new Config<T>({} as any);\n\n  constructor({ init, listeners }: Options<T>) {\n    this.listeners = (config) => {\n      // Unbind existing listeners\n      this._listeners.forEach((listener) => listener.off());\n      // Bind new listeners\n      return (this._listeners = listeners(config) as Listener[]);\n    };\n\n    this.init = (options) => {\n      const { imageParamsKeyMap, ...rest } = options as any;\n      this.config.setConfig({ ...this.config.getConfig(), ...rest });\n      setImageParamsKeyMap(imageParamsKeyMap);\n      return init(options);\n    };\n  }\n}\n\ntype Initializers = [Initializer<any>, { [key: string]: any } | undefined][];\n\nexport class initializers {\n  static _initializers: Initializers = [];\n  static _mounted: boolean = false;\n  static _imageParamsKeyMap: { [key: string]: string } | undefined = undefined;\n\n  static register(\n    initializer: Initializer<any>,\n    options?: { [key: string]: any }\n  ) {\n    if (initializers._mounted) {\n      initializer.listeners?.(options);\n      initializer.init?.(options);\n    }\n    initializers._initializers.push([initializer, options]);\n  }\n\n  static mount() {\n    initializers._mounted = true;\n    // In this specific order\n    // 1. Bind events\n    initializers._initializers?.forEach(([initializer, options]) => {\n      initializer.listeners?.(options);\n    });\n\n    // 2. Initialize APIs\n    initializers._initializers?.forEach(([initializer, options]) => {\n      initializer.init?.({\n        imageParamsKeyMap: initializers._imageParamsKeyMap,\n        ...options,\n      });\n    });\n  }\n\n  static setImageParamKeys(params: { [key: string]: any }) {\n    initializers._imageParamsKeyMap = params;\n  }\n}\n","export class Config<T> {\n  private config: T;\n\n  constructor(initialConfig: T) {\n    this.config = initialConfig;\n  }\n\n  getConfig(): T {\n    return this.config;\n  }\n\n  setConfig(newConfig: T): void {\n    this.config = newConfig;\n  }\n}\n","import { Lang } from '@adobe/elsie/i18n';\nimport { Initializer } from '@adobe/elsie/lib';\n\nexport type ConfigProps = {\n  guestViewCookieExpirationDays?: number;\n  langDefinitions?: Lang;\n};\n\nexport const initialize = new Initializer<ConfigProps>({\n  init: async (_config) => {\n    const config = { guestViewCookieExpirationDays: 30, ..._config };\n    initialize.config.setConfig(config);\n  },\n\n  listeners: () => [],\n});\n\nexport const config = initialize.config;\n"],"names":["Initializer","constructor","init","listeners","_listeners","config","Config","forEach","listener","off","options","imageParamsKeyMap","rest","setConfig","getConfig","setImageParamsKeyMap","initialConfig","newConfig","initialize","_config","guestViewCookieExpirationDays"],"mappings":"qNAUO,MAAMA,CAAe,CAM1BC,YAAY,CAAEC,KAAAA,EAAMC,UAAAA,CAAAA,EAAyB,CALrCC,EAAAA,kBAAyB,CAAA,GACjCD,EAAAA,kBACAD,EAAAA,aACAG,EAAAA,cAAS,IAAIC,EAAU,CAAA,CAAU,GAG/B,KAAKH,UAAwBE,IAE3B,KAAKD,WAAWG,QAAsBC,GAAAA,EAASC,KAAK,EAE5C,KAAKL,WAAaD,EAAUE,CAAM,GAG5C,KAAKH,KAAoBQ,GAAA,CACjB,KAAA,CAAEC,kBAAAA,EAAmB,GAAGC,CAASF,EAAAA,EACvC,YAAKL,OAAOQ,UAAU,CAAE,GAAG,KAAKR,OAAOS,UAAU,EAAG,GAAGF,CAAAA,CAAM,EAC7DG,EAAqBJ,CAAiB,EAC/BT,EAAKQ,CAAO,CAAA,CAEvB,CACF,CC/BO,MAAMJ,CAAU,CAGrBL,YAAYe,EAAkB,CAFtBX,EAAAA,eAGN,KAAKA,OAASW,CAChB,CAEAF,WAAe,CACb,OAAO,KAAKT,MACd,CAEAQ,UAAUI,EAAoB,CAC5B,KAAKZ,OAASY,CAChB,CACF,CCNaC,MAAAA,EAAa,IAAIlB,EAAyB,CACrDE,KAAM,MAAOiB,GAAY,CACvB,MAAMd,EAAS,CAAEe,8BAA+B,GAAI,GAAGD,CAAAA,EAC5Cd,EAAAA,OAAOQ,UAAUR,CAAM,CACpC,EAEAF,UAAWA,IAAM,CAAA,CACnB,CAAC,EAEYE,EAASa,EAAWb"}