{"version":3,"file":"placeOrder2.js","sources":["../src/api/getCheckoutData/getCheckoutData.ts","../src/api/getStockStatus/graphql/getStockStatus.graphql.ts","../src/api/getStockStatus/getStockStatus.ts","../src/api/placeOrder/graphql/placeOrder.graphql.ts","../src/utils/storefrontEvents/completeCheckout.ts","../src/api/placeOrder/placeOrder.ts"],"sourcesContent":["import { MissingCart } from '@/checkout/api/errors';\nimport { getCheckoutDataQuery } from '@/checkout/api/getCheckoutData/graphql';\nimport { dispatchApiCall } from '@/checkout/api/utils/dispatchApiCall';\nimport { transformCart } from '@/checkout/data/transforms/transform-cart';\n\nexport const getCheckoutData = async (cartId: string) => {\n  if (!cartId) throw new MissingCart();\n\n  return await dispatchApiCall({\n    type: 'query',\n    query: getCheckoutDataQuery,\n    options: { method: 'POST', cache: 'no-cache', variables: { cartId } },\n    path: 'cart',\n    signalType: 'cart',\n    transformer: transformCart,\n  });\n};\n","export const getStockStatusQuery = /* GraphQL */ `\n  query getStockStatus($cartId: String!) {\n    cart(cart_id: $cartId) {\n      id\n      items {\n        __typename\n        uid\n        product {\n          uid\n          name\n          sku\n          stock_status\n          only_x_left_in_stock\n          ... on ConfigurableProduct {\n            variants {\n              attributes {\n                uid\n              }\n              product {\n                uid\n                stock_status\n              }\n            }\n          }\n          ... on BundleProduct {\n            items {\n              uid\n              options {\n                uid\n                product {\n                  uid\n                }\n              }\n            }\n          }\n        }\n        quantity\n        ... on ConfigurableCartItem {\n          configurable_options {\n            configurable_product_option_uid\n            option_label\n            configurable_product_option_value_uid\n            value_label\n          }\n        }\n        ... on BundleCartItem {\n          bundle_options {\n            uid\n            values {\n              uid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {\n  BundleCartItem,\n  BundleProduct,\n  Cart,\n  ConfigurableCartItem,\n  ConfigurableProduct,\n  DownloadableCartItem,\n  GiftCardCartItem,\n  ProductInterface,\n  ProductStockStatus,\n  SimpleCartItem,\n  VirtualCartItem,\n} from '@/checkout/__generated__/types';\nimport { fetchGraphQl } from '@/checkout/api';\nimport { FetchError, MissingCart } from '@/checkout/api/errors';\nimport { handleNetworkError } from '@/checkout/lib/network-error';\nimport { getStockStatusQuery } from './graphql/getStockStatus.graphql';\n\ninterface StockChecker {\n  (item: CartItem): boolean;\n}\n\ntype StockStatusOutput = {\n  cart: Pick<Cart, 'id' | 'items'>;\n};\n\ntype CartItem =\n  | BundleCartItem\n  | ConfigurableCartItem\n  | DownloadableCartItem\n  | GiftCardCartItem\n  | SimpleCartItem\n  | VirtualCartItem;\n\nconst isProductInStock = (product: ProductInterface): boolean => {\n  return product.stock_status === ProductStockStatus.InStock;\n};\n\nconst simpleStockChecker: StockChecker = (item) => {\n  return isProductInStock(item.product);\n};\n\nconst configStockChecker: StockChecker = (item) => {\n  const { configurable_options: options } = item as ConfigurableCartItem;\n  const { variants } = item.product as ConfigurableProduct;\n\n  if (!variants || !options) return false;\n\n  const selectedOptions = options.map(\n    (option) => option?.configurable_product_option_value_uid\n  );\n\n  const selectedVariant = variants.find((variant) => {\n    if (!variant || !variant.attributes) return false;\n\n    return variant.attributes.every(\n      (attribute) => attribute && selectedOptions.includes(attribute.uid)\n    );\n  });\n\n  // if no matching variant is found, we assume the product is out of stock\n  if (!selectedVariant) return false;\n\n  const { product: variantProduct } = selectedVariant;\n\n  if (!variantProduct) return false;\n\n  return isProductInStock(variantProduct);\n};\n\nconst bundleStockChecker: StockChecker = (item) => {\n  const { product } = item as BundleCartItem;\n\n  if (!isProductInStock(product)) return false;\n\n  // if any of the items inside the bundle is ouf of stock, it will not be part of this list\n  const { bundle_options: options } = item as BundleCartItem;\n  const { items: bundle } = product as BundleProduct;\n\n  return bundle?.length === options?.length;\n};\n\nconst getStockChecker = (type?: string): StockChecker => {\n  switch (type) {\n    case 'ConfigurableCartItem':\n      return configStockChecker;\n    case 'BundleCartItem':\n      return bundleStockChecker;\n    default:\n      return simpleStockChecker;\n  }\n};\n\nconst isOutOfStock = (item: CartItem) => {\n  const checker = getStockChecker(item.__typename);\n  return checker(item) === false;\n};\n\nexport const getStockStatus = async (\n  cartId: string\n): Promise<ProductStockStatus> => {\n  if (!cartId) throw new MissingCart();\n\n  const { data, errors } = await fetchGraphQl<StockStatusOutput>(\n    getStockStatusQuery,\n    { method: 'GET', cache: 'no-cache', variables: { cartId } }\n  ).catch(handleNetworkError);\n\n  if (errors) throw new FetchError(errors);\n\n  const cartItems = data?.cart?.items;\n\n  if (!cartItems || !cartItems.length) return ProductStockStatus.InStock;\n\n  const outOfStock = cartItems.filter((item) => {\n    if (!item) return false;\n    return isOutOfStock(item as CartItem);\n  });\n\n  return outOfStock.length > 0\n    ? ProductStockStatus.OutOfStock\n    : ProductStockStatus.InStock;\n};\n","export const placeOrderMutation = /* GraphQL */ `\n  mutation placeOrder($cartId: String!) {\n    placeOrder(input: { cart_id: $cartId }) {\n      orderV2 {\n        number\n        token\n      }\n    }\n  }\n`;\n","import { cartSignal } from '@/checkout/signals';\nimport { CartTaxItem } from '@/checkout/__generated__/types';\nimport {\n  ConfigurableOption,\n  Order,\n  ShoppingCart,\n  ShoppingCartItem,\n} from '@/checkout/types/CompleteCheckoutContextSchemas';\nimport { Cart } from '@/checkout/data/models/cart';\nimport { Item, ItemKind } from '@/checkout/data/models/cart-item';\nimport { ShippingMethod } from '@/checkout/data/models';\n\nfunction mapConfigurableOptions(\n  options: Record<string, string>\n): ConfigurableOption[] | undefined {\n  const result: ConfigurableOption[] = [];\n\n  for (const key in options) {\n    if (options[key] === null) continue;\n\n    result.push({\n      optionLabel: key,\n      valueLabel: options[key],\n    });\n  }\n\n  return result;\n}\n\nfunction mapCartItems(items: Item[]): ShoppingCartItem[] {\n  return items.map((item: Item): ShoppingCartItem => {\n    const { uid, name, sku, price, quantity } = item;\n\n    let cartItem: ShoppingCartItem = {\n      /* We don't know if Checkout drop-in can apply Manufacturerâ€™s Suggested Retail Price */\n      canApplyMsrp: true,\n      formattedPrice: '',\n      id: uid,\n      prices: {\n        price: {\n          value: price.value ?? 0,\n          currency: price.currency ?? '',\n        },\n      },\n      product: {\n        /* productId not exposed by core GraphQL as number (uid is string) */\n        productId: 0,\n        name,\n        sku,\n        productType: item.kind,\n        canonicalUrl: item.url || '',\n        mainImageUrl: item?.image?.src || '',\n      },\n      quantity,\n    };\n\n    if (item.kind === ItemKind.Configurable) {\n      cartItem.configurableOptions =\n        // @ts-ignore\n        mapConfigurableOptions(item.configurableOptions);\n    }\n\n    return cartItem;\n  }, []);\n}\n\n/**\n * This function builds the ShoppingCart context.\n * It maps the shopping cart data collected during the checkout process to the\n * specific schema format defined by the Adobe Commerce Events SDK.\n *\n * @param {CheckoutData} cart The cart data collected during the checkout process.\n * @returns {ShoppingCart} The ShoppingCart data formated.\n */\nfunction buildShoppingCartContext(cart: Cart): ShoppingCart {\n  const { id, items, prices, totalQty } = cart;\n  const hasItems = !!items?.length;\n\n  let shoppingCartContext: ShoppingCart = {\n    id,\n    prices: {\n      subtotalExcludingTax: {\n        value: prices?.subtotal_excluding_tax?.value ?? 0,\n        currency: prices?.subtotal_excluding_tax?.currency ?? '',\n      },\n      subtotalIncludingTax: {\n        value: prices?.subtotal_including_tax?.value ?? 0,\n        currency: prices?.subtotal_including_tax?.currency ?? '',\n      },\n    },\n    totalQuantity: totalQty,\n    possibleOnepageCheckout: true,\n  };\n\n  if (hasItems) {\n    shoppingCartContext.items = mapCartItems(items);\n  }\n\n  return shoppingCartContext;\n}\n\nfunction calculateTaxes(taxes: (CartTaxItem | null)[]): number {\n  const totalTaxAmount = taxes.reduce(\n    (total, tax) => total + tax!.amount.value!,\n    0\n  );\n\n  return totalTaxAmount;\n}\n\nfunction buildShippingMethod(method: ShippingMethod) {\n  return {\n    shippingMethod: `${method.carrier.code}_${method.code}`,\n    shippingAmount: method.amount.value ?? 0,\n  };\n}\n\n/**\n * This function builds the Order context.\n * It maps the order data collected during the checkout process to the specific\n * schema format defined by the Adobe Commerce Events SDK.\n *\n * @param {string} orderId The order ID generated when placed the order.\n * @param {Cart} cart The cart data collected during the checkout process.\n * @returns {Order} The Order data formated.\n */\nfunction buildOrderContext(orderId: string, cart: Cart): Order {\n  const { coupons, email, prices, selectedPaymentMethod, shippingAddresses } =\n    cart;\n  const hasAddresses = !!shippingAddresses?.length;\n\n  let orderContext: Order = {\n    appliedCouponCode: coupons[0]?.code ?? '',\n    email: email ?? '',\n    grandTotal: prices?.grand_total?.value ?? 0,\n    orderId,\n    orderType: 'checkout',\n    otherTax: 0,\n    paymentMethodCode: selectedPaymentMethod?.code ?? '',\n    paymentMethodName: selectedPaymentMethod?.title ?? '',\n    payments: [\n      /* By now the Checkout drop-in is only supporting one payment method */\n      {\n        paymentMethodCode: selectedPaymentMethod?.code ?? '',\n        paymentMethodName: selectedPaymentMethod?.title ?? '',\n        total: prices?.grand_total?.value ?? 0,\n      },\n    ],\n    salesTax: calculateTaxes(prices?.applied_taxes ?? []),\n    subtotalExcludingTax: prices?.subtotal_excluding_tax?.value ?? 0,\n    subtotalIncludingTax: prices?.subtotal_including_tax?.value ?? 0,\n  };\n\n  if (hasAddresses) {\n    const firstAddress = shippingAddresses[0];\n    const selectedShippingMethod = firstAddress?.selectedShippingMethod;\n\n    if (selectedShippingMethod) {\n      orderContext.shipping = buildShippingMethod(selectedShippingMethod);\n    }\n  }\n\n  return orderContext;\n}\n\n/**\n * This function sets both ShoppingCart and Order contexts to the ACDL before\n * firing the \"place-order\" event.\n * This code has been extracted from the ContextManager class (included into\n * the Adobe Commerce Events SDK package) and adapted in order to use directly\n * the ACDL own API methods.\n *\n * Code based on:\n *  ContextManager.ts::setShoppingCart(context: ShoppingCart): void\n *  ContextManager.ts::setOrder(context: Order): void\n *\n * @param {string} orderId The order ID generated when placed the order.\n * @returns {void}\n *\n * ContextManager class @see https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-sdk/src/ContextManager.ts\n */\nfunction setContext(orderId: string): void {\n  const { data } = cartSignal.value;\n\n  const shoppingCartContext = buildShoppingCartContext(data!);\n  const orderContext = buildOrderContext(orderId, data!);\n\n  window.adobeDataLayer = window.adobeDataLayer || [];\n\n  // First of all it deletes the previously added data layer context entries\n  window.adobeDataLayer.push(\n    { shoppingCartContext: null },\n    { orderContext: null }\n  );\n\n  // and finally it adds the specific data layer context entries for that request\n  window.adobeDataLayer.push({ shoppingCartContext }, { orderContext });\n}\n\n/**\n * This function publishes the \"place-order\" event pushing it to the ACDL (a\n * plain JavaScript Array that serves as a queue).\n * This code has been extracted from the PublishManager class (included into\n * the Adobe Commerce Events SDK package) and adapted in order to use directly\n * the ACDL own API methods.\n *\n * Code based on:\n *  PublishManager.ts::placeOrder(context?: CustomContext): void\n *\n * @returns {void}\n *\n * PublishManager class @see https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-sdk/src/PublishManager.ts\n */\nfunction publishPlaceOrderEvent(): void {\n  window.adobeDataLayer = window.adobeDataLayer || [];\n\n  /*global AdobeClientDataLayer */\n  /*eslint no-undef: \"error\"*/\n  window.adobeDataLayer.push((acdl: AdobeClientDataLayer) => {\n    const state = acdl.getState() || {};\n\n    acdl.push({\n      event: 'place-order',\n      eventInfo: {\n        ...state,\n      },\n    });\n  });\n}\n\n/**\n * \"completeCheckout\" is a Commerce event available when it's installed the\n * Data Connection extension. The data this event collects is sent to the Adobe\n * Experience Platform edge.\n *\n * This is a Storefront event that collects anonymized behavioral data from the\n * shoppers as they browse the site. The data this event collects can be used\n * to create promotions and campaigns targeted to a specific set of shoppers.\n * Storefront event data includes simple and configurable products only.\n *\n * \"completeCheckout\" is triggered when the shopper places an order.\n *\n * The code access directly the Adobe Client Data Layer (ACDL) package instead\n * of using the Adobe Commerce Events SDK package, because the ACDL reduces the\n * effort to instrument websites by providing a standardized method to expose\n * and access any kind of data for any script. It consists of a JavaScript\n * client-side event-driven data store that can be used on web pages:\n *\n * - to collect data about what the visitors experience on the web page\n * - to communicate this data to digital analytics and reporting servers\n *\n * @param {string} orderId The order ID generated when placed the order.\n * @returns {void}\n *\n * Data Connection Events documentation @see https://experienceleague.adobe.com/docs/commerce-merchant-services/data-connection/event-forwarding/events.html?lang=en#completecheckout\n * Adobe Commerce Events SDK GitHub repo @see https://github.com/adobe/commerce-events\n * Adobe Client Data Layer documentation @see https://github.com/adobe/adobe-client-data-layer/wiki\n * Adobe Client Data Layer GitHub repo @see https://github.com/adobe/adobe-client-data-layer\n */\nexport function completeCheckout(orderId: string): void {\n  setContext(orderId);\n  publishPlaceOrderEvent();\n}\n","import { PlaceOrderMutation } from '@/checkout/__generated__/types';\nimport {\n  FetchError,\n  MissingCart,\n  UnexpectedError,\n} from '@/checkout/api/errors';\nimport { fetchGraphQl } from '@/checkout/api/fetch-graphql';\nimport { placeOrderMutation } from '@/checkout/api/placeOrder/graphql';\nimport { handleNetworkError } from '@/checkout/lib/network-error';\nimport { completeCheckout } from '@/checkout/utils/storefrontEvents';\nimport { events } from '@adobe/event-bus';\nimport { FetchQueryError } from '@adobe/fetch-graphql';\n\nfunction handleErrors(errors: FetchQueryError) {\n  const isFetchError = errors.every((error) => error.extensions?.category);\n\n  if (isFetchError) throw new FetchError(errors);\n\n  throw new UnexpectedError(errors[0].message);\n}\n\nexport const placeOrder = async (cartId: string) => {\n  if (!cartId) throw new MissingCart();\n\n  const { data, errors } = await fetchGraphQl<PlaceOrderMutation>(\n    placeOrderMutation,\n    {\n      variables: { cartId },\n    }\n  ).catch(handleNetworkError)\n\n  if (errors) handleErrors(errors);\n\n  const order = data.placeOrder!.orderV2;\n\n  completeCheckout(order!.number);\n\n  // Reset the cart after the order is placed\n  events.emit('cart/reset', undefined); \n  // Emit the order to the checkout/order event\n  events.emit('checkout/order', order); \n};\n"],"names":["getCheckoutData","cartId","MissingCart","dispatchApiCall","type","query","getCheckoutDataQuery","options","method","cache","variables","path","signalType","transformer","transformCart","getStockStatusQuery","isProductInStock","product","stock_status","ProductStockStatus","InStock","simpleStockChecker","item","configStockChecker","configurable_options","variants","selectedOptions","map","option","configurable_product_option_value_uid","selectedVariant","find","variant","attributes","every","attribute","includes","uid","variantProduct","bundleStockChecker","bundle_options","items","bundle","length","getStockChecker","isOutOfStock","__typename","getStockStatus","data","errors","fetchGraphQl","catch","handleNetworkError","FetchError","cartItems","cart","filter","OutOfStock","placeOrderMutation","mapConfigurableOptions","result","key","push","optionLabel","valueLabel","mapCartItems","name","sku","price","quantity","cartItem","canApplyMsrp","formattedPrice","id","prices","value","currency","productId","productType","kind","canonicalUrl","url","mainImageUrl","image","src","ItemKind","Configurable","configurableOptions","buildShoppingCartContext","totalQty","hasItems","shoppingCartContext","subtotalExcludingTax","subtotal_excluding_tax","subtotalIncludingTax","subtotal_including_tax","totalQuantity","possibleOnepageCheckout","calculateTaxes","taxes","totalTaxAmount","reduce","total","tax","amount","buildShippingMethod","shippingMethod","carrier","code","shippingAmount","buildOrderContext","orderId","coupons","email","selectedPaymentMethod","shippingAddresses","hasAddresses","orderContext","appliedCouponCode","grandTotal","grand_total","orderType","otherTax","paymentMethodCode","paymentMethodName","title","payments","salesTax","applied_taxes","firstAddress","selectedShippingMethod","shipping","setContext","cartSignal","adobeDataLayer","window","publishPlaceOrderEvent","acdl","state","getState","event","eventInfo","completeCheckout","handleErrors","isFetchError","error","extensions","category","UnexpectedError","message","placeOrder","order","orderV2","number","emit","undefined"],"mappings":"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"}