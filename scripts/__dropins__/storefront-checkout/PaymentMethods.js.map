{"version":3,"mappings":"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","names":["useSlot","context","callback","render","elementRef","useRef","loadedRef","methodsRef","props","_setProps","useState","children","_state","setState","state","useMemo","get","key","set","value","intl","useContext","IntlContext","dictionary","_registerMethod","useCallback","current","push","warn","_htmlElementToVNode","elem","_jsx","tagName","toLowerCase","ref","refElem","appendChild","getSlotElement","element","document","querySelector","prependChild","insertBefore","firstChild","appendSibling","parent","parentNode","nextSibling","prependSibling","onChange","replaceWith","next","vnode","prev","useEffect","error","console","name","forEach","method","JSON","stringify","Slot","slot","slotProps","window","DROPINS","showSlots","sessionStorage","setItem","toString","body","classList","toggle","__vitePreload","getItem","PaymentOption","code","isLoading","isSelected","title","ToggleButton","className","label","selected","radioButtonProps","PaymentMethods","paymentMethodContent","options","selection","useText","Title","EmptyState","undefined","PaymentMethodsSkeleton","_jsxs","classes","Heading","level","length","IllustratedMessage","icon","Icon","source","Wallet","message","ProgressSpinner","map","Skeleton","SkeletonRow","variant","size","fullWidth","RadioButton","checked","type","defaultHandlers","free","$content","createElement","innerText","replaceHTML","checkmo","usePaymentMethods","onPlaceOrder","handleServerError","paymentMethodsSlot","isShippingInfoRequired","prevPaymentMethodSent","selectedPaymentMethod","setSelectedPaymentMethod","temporarySelectedPaymentMethod","setTemporarySelectedPaymentMethod","paymentMethodHandlers","setPaymentMethodHandlers","isDefaultContentUsed","setIsDefaultContentUsed","data","cartData","cartSignal","cartId","id","hasCartData","hasAddress","shippingAddresses","availablePaymentMethods","cartSelectedPaymentMethod","setAndSelectPaymentMethod","paymentMethod","paymentMethodToSend","setPaymentMethodOnCart","some","onPaymentMethodChange","addPaymentMethodHandler","handler","prevHandlers","mainSlotContent","domElement","selectedPaymentMethodHandler","_Fragment","PaymentMethodsComponent","pending"],"ignoreList":[],"sources":["../../ElsieSDK/packages/elsie/src/lib/slot.tsx","../src/components/PaymentMethods/PaymentMethods.tsx","../src/components/PaymentMethods/PaymentMethodsSkeleton.tsx","../src/components/ToggleButton/ToggleButton.tsx","../src/containers/PaymentMethods/defaultHandlers.tsx","../src/containers/PaymentMethods/PaymentMethods.tsx"],"sourcesContent":["import { RefObject, VNode } from 'preact';\nimport {\n  StateUpdater,\n  useContext,\n  useState,\n  useRef,\n  useEffect,\n  useMemo,\n  useCallback,\n} from 'preact/hooks';\nimport { IntlContext, Lang } from '@adobe/elsie/i18n';\nimport { HTMLAttributes } from 'preact/compat';\n\ntype MutateElement = (elem: HTMLElement) => void;\n\ninterface State {\n  get: (key: string) => void;\n  set: (key: string, value: any) => void;\n}\n\ninterface SlotElement {\n  appendChild: MutateElement;\n  prependChild: MutateElement;\n  appendSibling: MutateElement;\n  prependSibling: MutateElement;\n}\n\ninterface PrivateContext<T> {\n  _setProps: StateUpdater<{}>;\n  _registerMethod: (\n    cb: (next: T & DefaultSlotContext<T>, state: State) => void\n  ) => void;\n  _htmlElementToVNode: (element: HTMLElement) => VNode;\n}\n\ninterface DefaultSlotContext<T> extends PrivateContext<T> {\n  dictionary: Lang;\n  getSlotElement: (key: string) => SlotElement;\n  replaceWith: MutateElement;\n  appendChild: MutateElement;\n  prependChild: MutateElement;\n  appendSibling: MutateElement;\n  prependSibling: MutateElement;\n  onChange: (cb: (next: T & DefaultSlotContext<T>) => void) => void;\n}\n\ntype Context<T> = T & ThisType<DefaultSlotContext<T>>; // NOSONAR\n\nexport type SlotProps<T = any> = (\n  ctx: T & DefaultSlotContext<T>,\n  element: HTMLDivElement | null\n) => void;\n\nexport type SlotMethod<P = any> = (\n  callback: (next: unknown, state: State) => P\n) => void;\n\n// Slot Hook\nexport function useSlot<K, V extends HTMLDivElement>(\n  // @ts-ignore\n  context: Context<K> = {},\n  callback?: SlotProps<K>,\n  render?: Function\n): [RefObject<V>, Record<string, any>] {\n  // HTML Element\n  const elementRef = useRef<V>(null);\n\n  const loadedRef = useRef(false);\n\n  // Methods\n  const methodsRef = useRef<any>([]);\n\n  // Children VNodes\n  const [props, _setProps] = useState<Record<string, any>>({\n    children: [render?.({})],\n  });\n\n  // Attributes\n  const [_state, setState] = useState<any>({});\n\n  const state = useMemo(\n    () => ({\n      get: (key: string) => _state[key],\n      set: (key: string, value: any) => {\n        setState({ ...state, [key]: value });\n      },\n    }),\n    [_state]\n  );\n\n  /** Internationalization */\n  const { intl }: any = useContext(IntlContext);\n\n  // @ts-ignore\n  context.dictionary = intl.dictionary;\n\n  /** Privates */\n  // @ts-ignore\n  context._setProps = _setProps;\n\n  const _registerMethod = useCallback((callback: Function) => {\n    if (typeof callback === 'function') {\n      methodsRef.current.push(callback);\n    } else {\n      console.warn('Skipped: Invalid _registerMethod', callback);\n    }\n  }, []);\n\n  // @ts-ignore\n  context._registerMethod = _registerMethod;\n\n  const _htmlElementToVNode = useCallback((elem: HTMLElement) => {\n    return (\n      <div\n        data-slot-html-element={elem.tagName.toLowerCase()}\n        ref={(refElem) => {\n          refElem?.appendChild(elem);\n        }}\n      />\n    );\n  }, []);\n\n  // @ts-ignore\n  context._htmlElementToVNode = _htmlElementToVNode;\n\n  /** Prebuilt Methods */\n  // @ts-ignore\n  context.getSlotElement = useCallback((key: string) => {\n    const element = document.querySelector(`[data-slot-key=\"${key}\"]`);\n\n    if (!element) return;\n\n    return {\n      appendChild: (elem: HTMLElement) => {\n        element.appendChild(elem);\n      },\n\n      prependChild: (elem: HTMLElement) => {\n        element.insertBefore(elem, element.firstChild);\n      },\n\n      appendSibling: (elem: HTMLElement) => {\n        const parent = element.parentNode;\n        parent?.insertBefore(elem, element.nextSibling);\n      },\n\n      prependSibling: (elem: HTMLElement) => {\n        const parent = element.parentNode;\n        parent?.insertBefore(elem, element);\n      },\n    };\n  }, []);\n\n  // @ts-ignore\n  context.onChange = useCallback((callback: Function) => {\n    methodsRef.current.push(callback);\n  }, []);\n\n  // @ts-ignore\n  context.replaceWith = useCallback(\n    (elem: HTMLElement) => {\n      // @ts-ignore\n      _registerMethod((next) => {\n        // @ts-ignore\n        const children = _htmlElementToVNode(elem);\n\n        next._setProps({ children: [children] });\n      });\n    },\n    [_htmlElementToVNode, _registerMethod]\n  );\n\n  // @ts-ignore\n  context.appendChild = useCallback(\n    (elem: HTMLElement) => {\n      // @ts-ignore\n      _registerMethod((next) => {\n        // @ts-ignore\n        const vnode = _htmlElementToVNode(elem);\n\n        next._setProps((prev: any) => {\n          return {\n            ...prev,\n            children: [...prev.children, vnode],\n          };\n        });\n      });\n    },\n    [_htmlElementToVNode, _registerMethod]\n  );\n\n  // @ts-ignore\n  context.prependChild = useCallback(\n    (elem: HTMLElement) => {\n      // @ts-ignore\n      _registerMethod((next) => {\n        // @ts-ignore\n        const vnode = _htmlElementToVNode(elem);\n\n        next._setProps((prev: any) => {\n          return {\n            ...prev,\n            children: [vnode, ...prev.children],\n          };\n        });\n      });\n    },\n    [_htmlElementToVNode, _registerMethod]\n  );\n\n  // @ts-ignore\n  context.appendSibling = useCallback(\n    (elem: HTMLElement) => {\n      // @ts-ignore\n      _registerMethod(() => {\n        const parent = elementRef.current?.parentNode;\n\n        parent?.insertBefore(elem, elementRef.current?.nextSibling ?? null);\n      });\n    },\n    [_registerMethod]\n  );\n\n  // @ts-ignore\n  context.prependSibling = useCallback(\n    (elem: HTMLElement) => {\n      // @ts-ignore\n      _registerMethod(() => {\n        const parent = elementRef.current?.parentNode;\n\n        parent?.insertBefore(elem, elementRef.current);\n      });\n    },\n    [_registerMethod]\n  );\n\n  // Initialization\n  useEffect(() => {\n    const element = elementRef.current;\n\n    if (!callback || !element) return;\n\n    // Run callback\n    try {\n      callback(context as K & DefaultSlotContext<K>, element);\n    } catch (error) {\n      console.error(`Error in \"${callback.name}\" Slot callback`, error);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Lifecycles\n  useEffect(() => {\n    // Reset\n    _setProps({ children: [render?.(props)] });\n\n    // Run all registered methods\n    methodsRef.current.forEach((method: any) => {\n      method(context, state);\n    });\n\n    // Required to trigger re-render of render method\n    if (render?.name === 'render' && loadedRef.current === false) {\n      loadedRef.current = true;\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(context), JSON.stringify(_state), loadedRef.current]);\n\n  return [elementRef, props];\n}\n\n// Slot Component\ninterface SlotPropsComponent<T>\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'slot'> {\n  name: string;\n  slot?: SlotProps<T>;\n  context?: Context<T>;\n  render?: (props: Record<string, any>) => VNode | VNode[];\n}\n\nexport function Slot<T>({\n  name,\n  slot,\n  context,\n  children,\n  render,\n  ...props\n}: Readonly<SlotPropsComponent<T>>) {\n  const [elementRef, slotProps] = useSlot<T, HTMLDivElement>(\n    context,\n    slot,\n    render ?? (() => children)\n  );\n\n  useEffect(() => {\n    if (!name) console.warn('Slot \"name\" is required');\n  }, [name]);\n\n  return (\n    <div {...props} ref={elementRef} data-slot={name}>\n      {slotProps.children}\n    </div>\n  );\n}\n\n// Debugger\n\n// @ts-ignore\nwindow.DROPINS = window.DROPINS || {};\n\n// @ts-ignore\nwindow.DROPINS.showSlots = async (state) => {\n  // cache state in session storage\n  window.sessionStorage.setItem(\n    'dropin-debugger--show-slots',\n    state.toString()\n  );\n\n  document.body.classList.toggle('dropin-debugger--show-slots', state);\n\n  if (state) {\n    try {\n      await import('@adobe/elsie/components/UIProvider/debugger.css');\n    } catch (error) {}\n  }\n};\n\n// @ts-ignore\nwindow.DROPINS.showSlots(\n  window.sessionStorage.getItem('dropin-debugger--show-slots') === 'true'\n);\n","import { Heading, ToggleButton } from '@/checkout/components';\nimport { PaymentMethodsSkeleton } from '@/checkout/components/PaymentMethods';\nimport '@/checkout/components/PaymentMethods/PaymentMethods.css';\nimport { PaymentMethod } from '@/checkout/data/models/payment-method';\nimport {\n  Icon,\n  IllustratedMessage,\n  ProgressSpinner,\n} from '@adobe/elsie/components';\nimport { useText } from '@adobe/elsie/i18n';\nimport { Wallet } from '@adobe/elsie/icons';\nimport { classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\n\nexport interface PaymentMethodsProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  paymentMethodContent?: VNode;\n  isLoading?: boolean;\n  onChange?: (value: string) => void;\n  options?: PaymentMethod[];\n  selection?: string;\n}\n\ninterface PaymentOptionProps {\n  code: string;\n  isLoading?: boolean;\n  isSelected: boolean;\n  onChange: (value: string) => void;\n  title: string;\n}\n\nconst PaymentOption: FunctionComponent<PaymentOptionProps> = ({\n  code,\n  isLoading,\n  isSelected,\n  onChange,\n  title,\n}) => {\n  return (\n    <ToggleButton\n      className=\"checkout-payment-methods__method\"\n      label={title}\n      name=\"payment-method\"\n      value={code}\n      selected={isSelected}\n      onChange={onChange}\n      radioButtonProps={{\n        'aria-busy': isLoading,\n      }}\n      // TODO: Add icon\n    />\n  );\n};\n\nexport const PaymentMethods: FunctionComponent<PaymentMethodsProps> = ({\n  className,\n  paymentMethodContent,\n  isLoading,\n  onChange = () => {},\n  options,\n  selection,\n}) => {\n  const dictionary = useText({\n    Title: 'Checkout.PaymentMethods.title',\n    EmptyState: 'Checkout.PaymentMethods.emptyState',\n  });\n\n  if (options === undefined) return <PaymentMethodsSkeleton />;\n\n  return (\n    <div className={classes(['checkout-payment-methods', className])}>\n      <Heading level={2} className=\"checkout-payment-methods__title\">\n        {dictionary.Title}\n      </Heading>\n\n      {!isLoading && options!.length === 0 && (\n        <IllustratedMessage\n          icon={<Icon source={Wallet} />}\n          message={<p>{dictionary.EmptyState}</p>}\n        />\n      )}\n\n      <div className={classes(['checkout-payment-methods__wrapper'])}>\n        {isLoading && (\n          <ProgressSpinner className=\"checkout-payment-methods__spinner\" />\n        )}\n\n        <div\n          className={classes([\n            'checkout-payment-methods__methods',\n            ['checkout-payment-methods--loading', isLoading],\n            ['checkout-payment-methods--full-width', options!.length % 2 !== 0],\n          ])}\n        >\n          {options?.map((method) => (\n            <PaymentOption\n              code={method.code}\n              key={method.code}\n              onChange={onChange}\n              isSelected={method.code === selection}\n              title={method.title}\n            />\n          ))}\n        </div>\n\n        {paymentMethodContent && (\n          <div className=\"checkout-payment-methods__content\">\n            {paymentMethodContent}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { FunctionComponent } from 'preact';\nimport { Skeleton, SkeletonRow } from '@adobe/elsie/components';\n\nexport const PaymentMethodsSkeleton: FunctionComponent = () => {\n  return (\n    <Skeleton data-testid=\"payment-methods-skeleton\">\n      <SkeletonRow variant=\"heading\" size=\"medium\" />\n      <SkeletonRow variant=\"empty\" size=\"medium\" />\n      <SkeletonRow size=\"xlarge\" fullWidth={true} />\n      <SkeletonRow size=\"xlarge\" fullWidth={true} />\n    </Skeleton>\n  );\n};\n","import { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { classes } from '@adobe/elsie/lib';\nimport '@/checkout/components/ToggleButton/ToggleButton.css';\nimport { RadioButton } from '@adobe/elsie/components';\n\nexport interface ToggleButtonProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange' | 'icon'> {\n  label: string;\n  name: string;\n  value: string;\n  selected: boolean;\n  onChange: (value: string) => void;\n  icon?:\n    | VNode<HTMLAttributes<SVGSVGElement>>\n    | VNode<HTMLAttributes<HTMLImageElement>>;\n  radioButtonProps?: Omit<\n    HTMLAttributes<HTMLInputElement>,\n    'size' | 'label' | 'name' | 'value' | 'checked' | 'disabled'\n  >;\n}\n\nexport const ToggleButton: FunctionComponent<ToggleButtonProps> = ({\n  label,\n  name,\n  value,\n  icon,\n  selected,\n  onChange,\n  className,\n  children,\n  radioButtonProps,\n  ...props\n}) => {\n  return (\n    <div\n      className={classes([\n        'checkout-toggle-button',\n        className,\n        ['checkout-toggle-button__selected', selected],\n      ])}\n      {...props}\n    >\n      <label className=\"checkout-toggle-button__actionButton\">\n        <RadioButton\n          {...radioButtonProps}\n          label=\"\"\n          name={name}\n          value={value}\n          checked={selected}\n          onChange={() => onChange(value)}\n          aria-label={label}\n          className={classes([\n            className,\n            'checkout-toggle-button__radioButton',\n          ])}\n        />\n\n        <div className=\"checkout-toggle-button__content\">\n          {icon && (\n            <icon.type\n              {...icon?.props}\n              className=\"checkout-toggle-button__icon\"\n            />\n          )}\n\n          {label}\n        </div>\n      </label>\n    </div>\n  );\n};\n","import { SlotProps } from '@adobe/elsie/lib';\nimport { PaymentMethodContentSlotContext } from '.';\n\nexport interface PaymentMethodHandler {\n  render: SlotProps<PaymentMethodContentSlotContext>;\n}\n\nexport interface PaymentMethodHandlers {\n  [code: string]: PaymentMethodHandler;\n}\n\nexport const defaultHandlers: PaymentMethodHandlers = {\n  free: {\n    render: (context) => {\n      const $content = document.createElement('div');\n      $content.innerText = '';\n      context.replaceHTML($content);\n    },\n  },\n  checkmo: {\n    render: (context) => {\n      const $content = document.createElement('div');\n      $content.innerText = '';\n      context.replaceHTML($content);\n    },\n  },\n};\n","import { setPaymentMethod as setPaymentMethodOnCart } from '@/checkout/api';\nimport { PaymentMethods as PaymentMethodsComponent } from '@/checkout/components/PaymentMethods/PaymentMethods';\nimport {\n  PaymentMethodHandler,\n  defaultHandlers,\n} from '@/checkout/containers/PaymentMethods/defaultHandlers';\nimport { cartSignal } from '@/checkout/signals';\nimport { Container, Slot, SlotProps } from '@adobe/elsie/lib';\nimport {\n  HTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'preact/compat';\n\nexport interface PaymentMethodSlotContext {\n  addPaymentMethodHandler: (\n    code: string,\n    handler: { render: SlotProps<PaymentMethodContentSlotContext> }\n  ) => void;\n  replaceHTML: (domElement: HTMLElement) => void;\n}\n\nexport interface PaymentMethodContentSlotContext {\n  cartId: string;\n  onPlaceOrder: (fn: () => void) => void;\n  handleServerError: (error: any) => void;\n  replaceHTML: (domElement: HTMLElement) => void;\n}\n\nexport interface PaymentMethodsProps extends HTMLAttributes<HTMLDivElement> {\n  paymentMethodsSlot?: SlotProps<PaymentMethodSlotContext>;\n  onPlaceOrder: (fn: () => void) => void;\n  handleServerError: (error: any) => void;\n  isShippingInfoRequired?: boolean;\n}\n\nfunction usePaymentMethods(props: PaymentMethodsProps) {\n  const {\n    onPlaceOrder,\n    handleServerError,\n    paymentMethodsSlot,\n    isShippingInfoRequired,\n  } = props;\n\n  const prevPaymentMethodSent = useRef<string>();\n\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<\n    string | undefined\n  >();\n  const [temporarySelectedPaymentMethod, setTemporarySelectedPaymentMethod] =\n    useState<string | undefined>();\n\n  const [paymentMethodHandlers, setPaymentMethodHandlers] =\n    useState(defaultHandlers);\n\n  const [isDefaultContentUsed, setIsDefaultContentUsed] = useState(true);\n\n  const { data: cartData } = cartSignal.value;\n  const cartId = cartData?.id ?? '';\n  const hasCartData = !!cartData;\n  const hasAddress = !!cartData?.shippingAddresses?.[0];\n  const availablePaymentMethods = cartData?.availablePaymentMethods;\n  const cartSelectedPaymentMethod = cartData?.selectedPaymentMethod;\n\n  const setAndSelectPaymentMethod = useCallback(\n    async (paymentMethod: string) => {\n      try {\n        setSelectedPaymentMethod(paymentMethod);\n\n        if (!hasAddress && isShippingInfoRequired) return;\n\n        const paymentMethodToSend = paymentMethod;\n        if (paymentMethodToSend === prevPaymentMethodSent.current) return;\n        prevPaymentMethodSent.current = paymentMethodToSend;\n\n        await setPaymentMethodOnCart({ cartId, paymentMethod });\n      } catch (error: any) {\n        console.error('setting payment method failed:', error);\n      }\n    },\n    [cartId, hasAddress, isShippingInfoRequired]\n  );\n\n  useEffect(() => {\n    if (!hasCartData) return;\n\n    if (cartSelectedPaymentMethod?.code) {\n      const selectedPaymentMethodIsAvailable = availablePaymentMethods?.some(\n        (method: any) => method.code === cartSelectedPaymentMethod.code\n      );\n\n      if (selectedPaymentMethodIsAvailable) {\n        // select the method from the backend\n        setSelectedPaymentMethod(cartSelectedPaymentMethod.code);\n      } else if (availablePaymentMethods?.length) {\n        // select the first available method\n        setAndSelectPaymentMethod(availablePaymentMethods[0]!.code);\n      } else {\n        setSelectedPaymentMethod(undefined);\n      }\n    } else {\n      // default to the temporarily selected one or the first one\n      availablePaymentMethods![0] &&\n        setAndSelectPaymentMethod(\n          temporarySelectedPaymentMethod || availablePaymentMethods![0].code\n        );\n    }\n  }, [\n    availablePaymentMethods,\n    hasCartData,\n    cartSelectedPaymentMethod,\n    setAndSelectPaymentMethod,\n    temporarySelectedPaymentMethod,\n  ]);\n\n  const onPaymentMethodChange = async (value: string) => {\n    await setAndSelectPaymentMethod(value);\n    if (!cartSelectedPaymentMethod?.code) {\n      setTemporarySelectedPaymentMethod(value);\n    }\n  };\n\n  const addPaymentMethodHandler = useCallback(\n    (code: string, handler: PaymentMethodHandler) => {\n      if (!code) {\n        console.warn(\n          'Payment method handler is ignored because it has no code'\n        );\n        return;\n      }\n\n      if (!handler) {\n        console.warn('Payment method handler is ignored because it is empty');\n        return;\n      }\n\n      setPaymentMethodHandlers((prevHandlers) => ({\n        ...prevHandlers,\n        [code]: handler,\n      }));\n    },\n    []\n  );\n\n  // Run the main payment method container slot callback\n  const mainSlotContent = paymentMethodsSlot ? (\n    <Slot\n      name=\"PaymentMethods\"\n      slot={paymentMethodsSlot}\n      context={{\n        addPaymentMethodHandler,\n        replaceHTML(domElement) {\n          this.replaceWith(domElement);\n          setIsDefaultContentUsed(false);\n        },\n      }}\n    />\n  ) : null;\n\n  const selectedPaymentMethodHandler = selectedPaymentMethod\n    ? paymentMethodHandlers[selectedPaymentMethod]\n    : null;\n\n  const paymentMethodContent = selectedPaymentMethodHandler ? (\n    <Slot\n      key={selectedPaymentMethodHandler}\n      name=\"PaymentMethodContent\"\n      slot={selectedPaymentMethodHandler.render}\n      context={{\n        cartId,\n        onPlaceOrder,\n        handleServerError,\n        replaceHTML(domElement) {\n          this.replaceWith(domElement);\n        },\n      }}\n    />\n  ) : undefined;\n\n  useEffect(() => {\n    // Content has been replaced but payment method handlers have been added\n    if (!isDefaultContentUsed && paymentMethodHandlers != defaultHandlers) {\n      console.warn(\n        'Payment method handlers you have added are ignored because the default content has been replaced'\n      );\n    }\n  }, [isDefaultContentUsed, paymentMethodHandlers]);\n\n  return {\n    availablePaymentMethods,\n    selectedPaymentMethod,\n    onPaymentMethodChange,\n    paymentMethodContent,\n    mainSlotContent,\n    isDefaultContentUsed,\n  };\n}\n\nexport const PaymentMethods: Container<PaymentMethodsProps> = (props) => {\n  const {\n    onPlaceOrder,\n    handleServerError,\n    paymentMethodsSlot,\n    isShippingInfoRequired = true,\n  } = props;\n  const {\n    availablePaymentMethods,\n    selectedPaymentMethod,\n    onPaymentMethodChange,\n    paymentMethodContent,\n    mainSlotContent,\n    isDefaultContentUsed,\n  } = usePaymentMethods({\n    onPlaceOrder,\n    handleServerError,\n    paymentMethodsSlot,\n    isShippingInfoRequired,\n  });\n\n  return (\n    <>\n      {mainSlotContent && (\n        // @ts-ignore\n        <mainSlotContent.type\n          ref={mainSlotContent.ref}\n          {...mainSlotContent.props}\n        />\n      )}\n      {isDefaultContentUsed && (\n        <PaymentMethodsComponent\n          options={availablePaymentMethods}\n          selection={selectedPaymentMethod}\n          onChange={onPaymentMethodChange}\n          paymentMethodContent={paymentMethodContent}\n          isLoading={cartSignal.value.pending}\n        />\n      )}\n    </>\n  );\n};\n"],"file":"PaymentMethods.js"}