{"version":3,"file":"usePreselectedFields.js","sources":["../../ElsieSDK/packages/elsie/src/lib/form-values.ts","../../ElsieSDK/packages/elsie/src/lib/debounce.ts","../src/utils/autocompleteFieldCodes/autocompleteFieldCodes.ts","../src/utils/isEmpty/isEmpty.ts","../src/utils/processFormFields/processFormFields.ts","../src/utils/refetchEstimatedShippingMethods/refetchEstimatedShippingMethods.ts","../../ElsieSDK/packages/elsie/src/components/Input/Input.tsx","../../ElsieSDK/packages/elsie/src/components/Picker/Picker.tsx","../../ElsieSDK/packages/elsie/src/components/Field/Field.tsx","../src/hooks/useBreakpoint/useBreakpoint.ts","../src/components/Checkout/Checkout.tsx","../src/components/FieldsForm/fieldFactory.tsx","../src/components/FieldsForm/validation.ts","../src/components/FieldsForm/FieldsForm.tsx","../src/components/FieldsForm/FieldsFormSkeleton.tsx","../src/components/Heading/Heading.tsx","../src/components/AddressForm/AddressForm.tsx","../src/components/AddressForm/useAddressBackup.ts","../src/hooks/useValidity/useValidity.ts","../src/components/AddressForm/useAddressForm.ts","../src/components/AddressForm/usePreselectedFields.ts"],"sourcesContent":["export const getFormValues = (form: HTMLFormElement) => {\n  const formData: any = new FormData(form);\n  const result = Object.fromEntries(formData);\n  return result;\n};\n\nexport const getFormErrors = (form: HTMLFormElement) => {\n  const formData: any = new FormData(form);\n\n  const data = Object.fromEntries(formData);\n\n  const result = Object.entries(data).reduce((result, [key]) => {\n    // @ts-ignore\n    const field = form.elements[key];\n\n    return field?.validationMessage\n      ? { ...result, [key]: field.validationMessage }\n      : { ...result };\n  }, {});\n\n  return result;\n};\n","export const debounce = (fn: Function, ms: number) => {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  return function (this: any, ...args: any[]) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn.apply(this, args), ms);\n  };\n};\n","export interface fieldCodes {\n  firstname: string;\n  lastname: string;\n  company: string;\n  country: string;\n  region: string;\n  city: string;\n  postcode: string;\n  telephone: string;\n  street: string;\n  email: string;\n  middlename: string;\n  prefix: string;\n  suffix: string;\n}\n\n// HTML attribute: autocomplete\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\n// https://www.w3.org/TR/WCAG21/#input-purposes\nconst autocompleteFieldCodes: fieldCodes = {\n  firstname: 'given-name',\n  lastname: 'family-name',\n  company: 'organization',\n  country: 'country',\n  region: 'address-level1',\n  city: 'address-level2',\n  postcode: 'postal-code',\n  telephone: 'tel',\n  street: 'address-line1',\n  email: 'email',\n  middlename: 'additional-name',\n  prefix: 'honorific-prefix',\n  suffix: 'honorific-suffix',\n};\n\nexport default autocompleteFieldCodes;\n","export function isEmpty(obj: Record<string, any>): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}","import { AttributeFrontendInputEnum } from '@/checkout/__generated__/types';\nimport { FormFields } from '@/checkout/api';\nimport {\n  AddressFormErrors,\n  AddressFormFields,\n  AddressFormTypes,\n  AddressFormValues,\n  Country,\n  Region,\n  StoreConfig,\n} from '@/checkout/data/models';\nimport { regionsSignal } from '@/checkout/signals';\n\nimport {\n  getMultilineValues,\n  refetchEstimatedShippingMethods,\n} from '@/checkout/utils';\nimport { PickerOption } from '@adobe/elsie/src/components';\nimport { StateUpdater } from 'preact/hooks';\n\ntype FormFieldsProcessorProps = {\n  fields: FormFields;\n  address: AddressFormValues;\n  setAddress: StateUpdater<AddressFormValues>;\n  addressType: AddressFormTypes;\n  errors: AddressFormErrors;\n  config: StoreConfig;\n  availableRegions: Region[];\n  availableCountries: Country[] | undefined;\n  onSelection: (event: Event) => void;\n  onChange: (event: Event) => void;\n  onBlur: (event: Event) => void;\n  onInvalid: (event: Event) => void;\n};\n\nexport type FormField = Omit<FormFields[number], 'options'> & {\n  addressType: AddressFormTypes;\n  className: string;\n  disabled?: boolean;\n  error: string | string[];\n  handleSelect?: (event: Event) => void;\n  id?: string;\n  onBlur: (event: Event) => void;\n  onChange: (event: Event) => void;\n  onInvalid: (event: Event) => void;\n  options?: PickerOption[];\n  value: string | string[];\n};\n\ntype FormFieldOptions = FormFields[number]['options'];\n\nconst isValidOption = (option: FormFieldOptions[number]) => {\n  return option?.label && option?.value;\n};\n\nconst transformFormFieldOptions = (data: FormFieldOptions): PickerOption[] => {\n  if (!data) return [];\n\n  return data.filter(isValidOption).map((option) => ({\n    text: option!.label,\n    value: option!.value,\n  }));\n};\n\nconst transformRegionOptions = (regions: Region[]): PickerOption[] => {\n  return regions.map((region) => {\n    const value = region?.id?.toString() || region.code;\n    return { text: region.name, value };\n  });\n};\n\nconst transformCountryOptions = (\n  countries: Country[] | undefined\n): PickerOption[] => {\n  if (!countries) return [];\n\n  return countries.map((country) => ({\n    text: country.label,\n    value: country.value,\n  }));\n};\n\nexport function processFormFields({\n  fields,\n  address,\n  setAddress,\n  addressType,\n  errors,\n  config,\n  availableCountries,\n  availableRegions,\n  onSelection,\n  onChange,\n  onBlur,\n  onInvalid,\n}: FormFieldsProcessorProps): FormField[] {\n  const resetRegion = () => {\n    setAddress((address) => ({\n      ...address,\n      [AddressFormFields.Region]: '',\n      [AddressFormFields.RegionId]: '',\n    }));\n  };\n\n  const syncRegionId = (regionId: string) => {\n    setAddress((address) => ({\n      ...address,\n      [AddressFormFields.RegionId]: regionId,\n    }));\n  };\n\n  return fields.map((field) => {\n    let is_required = field.is_required;\n    let value: string | string[];\n    let inputType = field.frontend_input;\n    let options: PickerOption[] = [];\n    let error: string | string[];\n    let handleSelect;\n    let disabled = false;\n\n    if (inputType === 'MULTILINE') {\n      value = getMultilineValues(field.code, address);\n      error = getMultilineValues(field.code, errors);\n    } else {\n      value = address[field.code];\n      error = errors[field.code] || '';\n    }\n\n    if (\n      field.code !== AddressFormFields.Region &&\n      field.code !== AddressFormFields.Country\n    ) {\n      options = transformFormFieldOptions(field.options);\n    }\n\n    if (field.code === AddressFormFields.Country) {\n      options = transformCountryOptions(availableCountries);\n      if (addressType === AddressFormTypes.SHIPPING) {\n        regionsSignal.value.country = value as string;\n\n        handleSelect = (event: Event) => {\n          const target = event.target as HTMLInputElement;\n          const { value } = target;\n\n          if (value) {\n            refetchEstimatedShippingMethods({\n              country_code: value,\n            });\n          }\n\n          onSelection(event);\n          resetRegion();\n        };\n      } else {\n        handleSelect = onSelection;\n      }\n    }\n\n    if (field.code === AddressFormFields.RegionId) {\n      if (addressType === AddressFormTypes.SHIPPING) {\n        regionsSignal.value.selectedRegionId = value as string;\n      }\n    }\n\n    if (field.code === AddressFormFields.Region) {\n      if (addressType === regionsSignal.value.addressType) {\n        disabled = regionsSignal.value.pending;\n      }\n\n      is_required = config!.countriesWithRequiredRegion.includes(\n        address?.country_id\n      );\n      options = transformRegionOptions(availableRegions);\n\n      if (!is_required && !config!.displayStateIfOptional) {\n        inputType = AttributeFrontendInputEnum.Undefined;\n      }\n\n      inputType =\n        options.length > 0\n          ? AttributeFrontendInputEnum.Select\n          : AttributeFrontendInputEnum.Text;\n\n      if (inputType === 'SELECT') {\n        if (addressType === AddressFormTypes.SHIPPING) {\n          regionsSignal.value.selectedRegion = value as string;\n\n          handleSelect = (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const selectedRegion = target.value;\n\n            refetchEstimatedShippingMethods({\n              country_code: regionsSignal.value.country as string,\n              region_id: selectedRegion,\n            });\n\n            onSelection(event);\n            syncRegionId(selectedRegion);\n          };\n        } else {\n          handleSelect = (event: Event) => {\n            onSelection(event);\n            const target = event.target as HTMLSelectElement;\n            const selectedRegion = target.value;\n            syncRegionId(selectedRegion);\n          };\n        }\n      } else if (inputType === 'TEXT') {\n        if (addressType === AddressFormTypes.SHIPPING) {\n          regionsSignal.value.selectedRegion = value as string;\n\n          const defaultOnChange = onChange;\n\n          onChange = (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const { value } = target;\n\n            if (regionsSignal.value.country) {\n              refetchEstimatedShippingMethods({\n                country_code: regionsSignal.value.country as string,\n                region_name: value as string,\n              });\n            }\n\n            defaultOnChange(event);\n          };\n        }\n      }\n\n      value =\n        options.length > 0\n          ? options.find((regionOption) => regionOption!.value === value)\n              ?.value || ''\n          : value;\n    }\n\n    if (field.code === AddressFormFields.PostCode) {\n      is_required = !config!.countriesWithOptionalZipCode.includes(\n        address?.country_id as string\n      );\n    }\n\n    return {\n      ...field,\n      is_required,\n      frontend_input: inputType,\n      addressType,\n      className: `checkout-address-form__${field.code}`,\n      value,\n      options,\n      error,\n      onChange,\n      onBlur,\n      onInvalid,\n      handleSelect,\n      disabled,\n    };\n  });\n}\n\nexport type ProcessedFormFields = ReturnType<typeof processFormFields>;\n","import { cartSignal } from '@/checkout/signals';\nimport { DEBOUNCE_TIME } from '@/checkout/components/AddressForm/constants';\nimport { ShippingEstimationCriteria, estimateShippingMethods } from '@/checkout/api';\n\nlet estimateShipppingTimer: ReturnType<typeof setTimeout>;\nexport function refetchEstimatedShippingMethods(\n  criteria: ShippingEstimationCriteria\n) {\n  const cartData = cartSignal.value.data;\n  const hasCartData = !!cartData;\n  const firstAddress = cartData?.shippingAddresses?.[0];\n  const availableShippingMethods = firstAddress?.availableShippingMethods;\n\n  if (hasCartData && !availableShippingMethods) {\n    clearTimeout(estimateShipppingTimer);\n\n    estimateShipppingTimer = setTimeout(() => {\n      estimateShippingMethods({ cartId: cartData.id, criteria });\n    }, DEBOUNCE_TIME);\n  }\n}\n","import { Icon } from '@adobe/elsie/components/Icon';\nimport '@adobe/elsie/components/Input/Input.css';\nimport { CheckWithCircle, WarningWithCircle } from '@adobe/elsie/icons';\nimport { VComponent, classes, debounce } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { useCallback } from 'preact/hooks';\n\nexport interface InputProps\n  extends Omit<HTMLAttributes<HTMLInputElement>, 'size' | 'icon'> {\n  id?: string;\n  name?: string;\n  variant?: 'primary' | 'secondary';\n  disabled?: boolean;\n  error?: boolean;\n  floatingLabel?: string;\n  onUpdateError?: (error: Error) => void;\n  onValue?: (value: any) => void;\n  size?: 'medium' | 'large';\n  success?: boolean;\n  icon?: VNode<HTMLAttributes<SVGSVGElement>>;\n  maxLength?: number;\n}\n\nexport const Input: FunctionComponent<InputProps> = ({\n  name,\n  value,\n  variant = 'primary',\n  className,\n  disabled,\n  error,\n  floatingLabel,\n  onValue,\n  onUpdateError,\n  size = 'medium',\n  icon,\n  maxLength,\n  success,\n  ...props\n}) => {\n  const id = props?.id || name || `dropin-input-${Math.random().toString(36)}`;\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debouncedOnValueHandler = useCallback(\n    debounce(async (newValue: any) => {\n      if (onValue) {\n        try {\n          await onValue(newValue);\n        } catch (e) {\n          if (onUpdateError) {\n            onUpdateError(e as Error);\n          }\n        }\n      }\n    }, 200),\n    [onValue, onUpdateError]\n  );\n\n  const handleOnValue = (e: Event) => {\n    const input = e.target as HTMLInputElement;\n\n    debouncedOnValueHandler(input.value.trim());\n  };\n\n  return (\n    <div\n      className={classes([\n        'dropin-input-container',\n        `dropin-input-container--${variant}`,\n        [`dropin-input-container--floating`, !!floatingLabel],\n        ['dropin-input-container--disabled', disabled],\n      ])}\n    >\n      {icon && (\n        <VComponent\n          node={icon}\n          className={classes([\n            'dropin-input__field-icon--left',\n            icon.props.className,\n          ])}\n        />\n      )}\n      <div className=\"dropin-input-label-container\">\n        {/* Input */}\n        <input\n          id={id}\n          onChange={handleOnValue}\n          type=\"text\"\n          maxLength={maxLength}\n          name={name}\n          value={value}\n          {...props}\n          className={classes([\n            'dropin-input',\n            `dropin-input--${size}`,\n            `dropin-input--${variant}`,\n            [`dropin-input--error`, !!error],\n            [`dropin-input--success`, !!success],\n            ['dropin-input--disabled', disabled],\n            [`dropin-input--floating`, !!floatingLabel],\n            [`dropin-input--icon-left`, !!icon],\n            className,\n          ])}\n          disabled={disabled}\n        />\n\n        {/* Floating Label */}\n        {floatingLabel && (\n          <label\n            htmlFor={id}\n            className={classes([\n              [`dropin-input__label--floating`, !!floatingLabel],\n              [`dropin-input__label--floating--icon-left`, !!icon],\n              [`dropin-input__label--floating--error`, !!error],\n            ])}\n          >\n            {floatingLabel}\n          </label>\n        )}\n      </div>\n\n      {error && (\n        <div\n          className={classes([\n            'dropin-input__field-icon--right',\n            'dropin-input__field-icon--error',\n          ])}\n        >\n          <Icon\n            source={WarningWithCircle}\n            size=\"16\"\n            stroke=\"2\"\n            className=\"dropin-input--warning-icon\"\n            viewBox=\"-1 -1 26 26\"\n          />\n        </div>\n      )}\n\n      {success && (\n        <div\n          className={classes([\n            'dropin-input__field-icon--right',\n            'dropin-input__field-icon--success',\n          ])}\n        >\n          <Icon\n            source={CheckWithCircle}\n            size=\"16\"\n            stroke=\"2\"\n            className=\"dropin-input--success-icon\"\n            viewBox=\"-1 -1 26 26\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Icon } from '@adobe/elsie/components';\nimport '@adobe/elsie/components/Picker/Picker.css';\nimport { ChevronDown } from '@adobe/elsie/icons';\nimport { classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes, useEffect, useState } from 'preact/compat';\nimport { useRef } from 'preact/hooks';\n\nexport interface PickerOption {\n  value: string | null;\n  text?: string;\n  icon?: VNode<HTMLAttributes<SVGSVGElement>>;\n  disabled?: boolean;\n}\n\nexport interface PickerProps\n  extends Omit<HTMLAttributes<HTMLSelectElement>, 'value' | 'size' | 'icon'> {\n  id?: string;\n  name?: string;\n  value?: string | null;\n  placeholder?: string;\n  variant?: 'primary' | 'secondary';\n  size?: 'medium' | 'large';\n  floatingLabel?: string;\n  icon?: VNode<HTMLAttributes<SVGSVGElement>>;\n  options?: PickerOption[];\n  defaultOption?: PickerOption;\n  disabled?: boolean;\n  error?: boolean;\n  handleSelect?: (event: Event) => void;\n}\n\nexport const Picker: FunctionComponent<PickerProps> = ({\n  name,\n  value = null,\n  options,\n  variant = 'primary',\n  floatingLabel,\n  size = 'medium',\n  handleSelect = () => {},\n  disabled = false,\n  error = false,\n  placeholder,\n  defaultOption,\n  icon,\n  className,\n  ...props\n}) => {\n  const id = props?.id || name || `dropin-picker-${Math.random().toString(36)}`;\n\n  // find the first option that is not disabled\n  const firstAvailableeOption = options?.find((option) => !option.disabled);\n\n  const [selectedValue, setSelectedValue] = useState<PickerOption>({\n    value,\n    text: defaultOption?.text || placeholder || firstAvailableeOption?.text,\n    icon,\n  });\n\n  useEffect(() => {\n    const selected = options?.find((option) => option.value === value);\n\n    setSelectedValue(\n      selected ?? {\n        value:\n          (defaultOption?.value as string) ||\n          ((placeholder || floatingLabel\n            ? null\n            : firstAvailableeOption?.value) as string),\n        text: defaultOption?.text || placeholder || firstAvailableeOption?.text,\n        icon,\n      }\n    );\n  }, [value, options, placeholder, icon, defaultOption, floatingLabel]);\n\n  const handleOptionClick = (event: Event) => {\n    const { options, value } = event.target as HTMLSelectElement;\n\n    for (const element of options) {\n      if (element.selected) {\n        setSelectedValue({ value, text: element.text, icon });\n        handleSelect(event);\n      }\n    }\n  };\n\n  const optionsListItems = options?.map((option) => {\n    const { value, text, disabled } = option;\n    const selected = value === selectedValue.value;\n\n    return (\n      <option\n        value={value as string}\n        key={value}\n        selected={selected}\n        disabled={disabled}\n        className={classes(['dropin-picker__option'])}\n      >\n        {text}\n      </option>\n    );\n  });\n\n  const placeholderOptionRef = useRef(null);\n  // @ts-ignore\n  const selected = !placeholderOptionRef.current?.selected || !!defaultOption;\n\n  return (\n    <div\n      className={classes([\n        className,\n        'dropin-picker',\n        `dropin-picker__${size}`,\n        ['dropin-picker__floating', !!floatingLabel],\n        ['dropin-picker__selected', selected],\n        ['dropin-picker__error', error],\n        ['dropin-picker__disabled', disabled],\n        ['dropin-picker__icon', icon],\n      ])}\n    >\n      {icon && (\n        // @ts-ignore\n        <icon.type\n          {...icon.props}\n          className={'dropin-picker__icon--placeholder'}\n        />\n      )}\n\n      <select\n        id={id}\n        className={classes([\n          'dropin-picker__select',\n          `dropin-picker__select--${variant}`,\n          `dropin-picker__select--${size}`,\n          ['dropin-picker__select--floating', !!floatingLabel],\n        ])}\n        name={name}\n        aria-label={name}\n        disabled={disabled}\n        onChange={handleOptionClick}\n        {...props}\n      >\n        {!defaultOption && (floatingLabel || placeholder) && (\n          <option\n            value={''}\n            key={value}\n            ref={placeholderOptionRef}\n            className={classes([\n              'dropin-picker__option dropin-picker__placeholder',\n            ])}\n          >\n            {floatingLabel ?? placeholder}\n          </option>\n        )}\n\n        {optionsListItems}\n      </select>\n\n      <Icon\n        source={ChevronDown}\n        size=\"24\"\n        stroke=\"2\"\n        className=\"dropin-picker__chevronDown\"\n      />\n\n      {floatingLabel && selected && (\n        <label\n          htmlFor={id}\n          className={classes(['dropin-picker__floatingLabel', !!floatingLabel])}\n        >\n          {floatingLabel}\n        </label>\n      )}\n    </div>\n  );\n};\n","import '@adobe/elsie/components/Field/Field.css';\nimport { classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\n\nexport interface FieldProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'size'> {\n  label?: string;\n  error?: string;\n  hint?: string;\n  success?: string;\n  disabled?: boolean;\n  children?: VNode;\n  size?: 'medium' | 'large';\n}\n\nexport const Field: FunctionComponent<FieldProps> = ({\n  className,\n  label,\n  error,\n  hint,\n  success,\n  size = 'medium',\n  disabled = false,\n  children,\n  ...props\n}) => {\n  const id =\n    children?.props?.id ?? `dropin-field-${Math.random().toString(36)}`;\n  const ChildComponent =\n    children && typeof children.type !== 'string' ? children.type : null;\n\n  return (\n    <div {...props} className={classes(['dropin-field', className])}>\n      {label && (\n        <label\n          className={classes([\n            'dropin-field__label',\n            ['dropin-field__label--disabled', disabled],\n            `dropin-field__label--${size}`,\n          ])}\n          htmlFor={id}\n        >\n          {label}\n        </label>\n      )}\n\n      <div className={classes(['dropin-field__content'])}>\n        {ChildComponent && children && (\n          <ChildComponent\n            {...children.props}\n            id={id}\n            key={children.key}\n            disabled={disabled}\n            size={size}\n            error={!!error}\n            success={!!success && !error}\n          />\n        )}\n      </div>\n\n      <div\n        className={classes([\n          'dropin-field__hint',\n          [`dropin-field__hint--${size}`, size],\n          ['dropin-field__hint--error', !!error],\n          ['dropin-field__hint--success', !!success && !error],\n          ['dropin-field__hint--disabled', !!disabled],\n        ])}\n      >\n        {error || success || hint}\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'preact/hooks';\n\nexport const useBreakpoint = () => {\n  const getBreakpoint = () => {\n    if (window.innerWidth >= 1920) return 'xxlarge';\n    if (window.innerWidth >= 1366) return 'xlarge';\n    if (window.innerWidth >= 1024) return 'large';\n    if (window.innerWidth >= 768) return 'medium';\n\n    return 'small';\n  };\n\n  const [breakpoint, setBreakpoint] = useState<\n    ReturnType<typeof getBreakpoint>\n  >(getBreakpoint());\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    const handleResize = () => {\n      if (timeoutId) clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => setBreakpoint(getBreakpoint()), 50);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, []);\n\n  return breakpoint;\n};\n","import { Heading } from '@/checkout/components';\nimport { useBreakpoint } from '@/checkout/hooks/useBreakpoint';\nimport { Text } from '@adobe/elsie/i18n';\nimport { VComponent, classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\n\nimport '@/checkout/components/Checkout/Checkout.css';\n\nconst ConditionalWrapper: FunctionComponent<{\n  children?: VNode;\n  className: string;\n}> = ({ children, className }) => {\n  const breakpoint = useBreakpoint();\n  if (breakpoint === 'small') return <>{children}</>;\n  return <div className={className}>{children}</div>;\n};\n\nexport type AsideSections = {\n  cartSummary: VNode;\n  orderSummary: VNode;\n};\n\nconst Aside: FunctionComponent<{ sections: AsideSections }> = ({\n  sections,\n}) => {\n  return (\n    <ConditionalWrapper className=\"checkout__aside\">\n      <>\n        <VComponent node={sections.orderSummary} />\n        <VComponent node={sections.cartSummary} />\n      </>\n    </ConditionalWrapper>\n  );\n};\n\nexport type MainSections = {\n  billingAddress: VNode;\n  billToShippingAddress?: VNode;\n  login: VNode;\n  paymentMethods: VNode;\n  placeOrder: VNode;\n  shippingAddress?: VNode;\n  shippingMethods?: VNode;\n};\n\nconst MainContent: FunctionComponent<MainSections> = ({\n  billingAddress,\n  billToShippingAddress,\n  login,\n  paymentMethods,\n  placeOrder,\n  shippingAddress,\n  shippingMethods,\n}) => {\n  return (\n    <>\n      <VComponent node={login} />\n      {shippingAddress && <VComponent node={shippingAddress} />}\n      {billToShippingAddress && <VComponent node={billToShippingAddress} />}\n      {shippingMethods && <VComponent node={shippingMethods} />}\n      <VComponent node={paymentMethods} />\n      <VComponent node={billingAddress} />\n      <VComponent node={placeOrder} />\n    </>\n  );\n};\n\nconst Main: FunctionComponent<{\n  outOfStock?: VNode;\n  sections?: MainSections;\n}> = ({ outOfStock, sections }) => {\n  return (\n    <ConditionalWrapper className=\"checkout__main\">\n      <>\n        <Heading level={1} className=\"checkout-title\">\n          <Text id=\"Checkout.title\" />\n        </Heading>\n\n        {outOfStock && (\n          <VComponent className=\"checkout-outOfStock\" node={outOfStock} />\n        )}\n\n        {sections && <MainContent {...sections} />}\n      </>\n    </ConditionalWrapper>\n  );\n};\n\nexport interface CheckoutProps extends HTMLAttributes<HTMLDivElement> {\n  banner?: VNode;\n}\n\ninterface CheckoutComponent extends FunctionComponent<CheckoutProps> {\n  Main: typeof Main;\n  Aside: typeof Aside;\n}\n\nexport const Checkout: CheckoutComponent = (props) => {\n  const { banner, className, children, ...restProps } = props;\n\n  return (\n    <div className={classes(['checkout', className])} {...restProps}>\n      {banner && <VComponent className=\"checkout__banner\" node={banner} />}\n      <div className=\"checkout__content\">{children}</div>\n    </div>\n  );\n};\n\nCheckout.Main = Main;\nCheckout.Aside = Aside;\n","import { ValidationRule } from '@/checkout/__generated__/types';\nimport { BaseField, validityProps } from '@/checkout/components/FieldsForm';\nimport autocompleteFieldCodes, {\n  fieldCodes,\n} from '@/checkout/utils/autocompleteFieldCodes/autocompleteFieldCodes';\nimport { Field, Input, Picker } from '@adobe/elsie/components';\n\nconst hiddenField = (field: BaseField) => {\n  const { id, addressType, className, code, value, default_value } = field;\n  const fieldID = id || code;\n\n  return (\n    <input\n      className={className}\n      id={`${addressType}-${fieldID}`}\n      key={code}\n      name={code}\n      type=\"hidden\"\n      value={value ?? default_value}\n    />\n  );\n};\n\nconst textField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    error,\n    id,\n    onBlur,\n    onChange,\n    onInvalid,\n    validate_rules,\n    value,\n  } = field;\n\n  const validity = validityProps(validate_rules as ValidationRule[]);\n  const fieldID = id || code;\n\n  return (\n    <Field disabled={field.disabled} error={error as string}>\n      <Input\n        aria-label={field.label!}\n        autocomplete={autocompleteFieldCodes[code as keyof fieldCodes] || 'off'}\n        className={className}\n        floatingLabel={`${field.label} ${field.is_required ? '*' : ''}`}\n        id={`${addressType}-${fieldID}`}\n        onBlur={onBlur}\n        onChange={onChange}\n        onInvalid={onInvalid}\n        placeholder={field.label!}\n        required={field.is_required || false}\n        type=\"text\"\n        // @ts-ignore\n        name={code}\n        // @ts-ignore\n        value={value ?? undefined}\n        {...validity}\n      />\n    </Field>\n  );\n};\n\nconst multilineField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    disabled,\n    error,\n    id,\n    is_required,\n    label,\n    multiline_count,\n    onBlur,\n    onChange,\n    onInvalid,\n    validate_rules,\n    value,\n  } = field;\n\n  const numOfFields = multiline_count ?? 0;\n  const fieldID = id || code;\n  const validity = validityProps(validate_rules as ValidationRule[]);\n\n  return (\n    <>\n      {Array.from(Array(numOfFields).keys()).map((i) => (\n        <Field\n          disabled={disabled}\n          error={(error as string[])?.[i] || ''}\n          key={`${code}-${i}`}\n          className=\"dropin-field--multiline\"\n        >\n          <Input\n            id={`${addressType}-${fieldID}-${i}`}\n            className={className}\n            floatingLabel={`${label} ${i != 0 ? i : ''} ${\n              is_required && i === 0 ? '*' : ''\n            }`}\n            autocomplete={\n              i === 0 ? autocompleteFieldCodes[code as keyof fieldCodes] : 'off'\n            }\n            aria-label={label!}\n            placeholder={`${label} ${i != 0 ? i : ''}`}\n            type=\"text\"\n            required={is_required && i === 0}\n            onChange={onChange}\n            onBlur={onBlur}\n            onInvalid={onInvalid}\n            // @ts-ignore\n            name={`${code}-${i}`}\n            // @ts-ignore\n            value={(value as string[])?.[i] || undefined}\n            {...validity}\n          />\n        </Field>\n      ))}\n    </>\n  );\n};\n\nconst selectField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    disabled,\n    error,\n    handleSelect,\n    id,\n    is_required,\n    label,\n    onBlur,\n    onInvalid,\n    options,\n    value,\n  } = field;\n\n  const fieldID = id || code;\n  const handleSelectAttribute = handleSelect ? { handleSelect } : {};\n\n  return (\n    <Field disabled={disabled} error={error as string}>\n      <Picker\n        id={`${addressType}-${fieldID}`}\n        className={className}\n        key={code}\n        name={code}\n        floatingLabel={`${label} ${is_required ? '*' : ''}`}\n        required={is_required}\n        placeholder={label!}\n        aria-label={label!}\n        options={options}\n        value={value as string}\n        autocomplete={autocompleteFieldCodes[code as keyof fieldCodes] || 'off'}\n        onBlur={onBlur}\n        onInvalid={onInvalid}\n        {...handleSelectAttribute}\n      />\n    </Field>\n  );\n};\n\nexport const createField = (field: BaseField) => {\n  switch (field.frontend_input) {\n    case 'BOOLEAN':\n    case 'DATE':\n    case 'DATETIME':\n    case 'FILE':\n    case 'GALLERY':\n    case 'IMAGE':\n    case 'MEDIA_IMAGE':\n    case 'MULTISELECT':\n    case 'PRICE':\n    case 'TEXTAREA':\n    case 'UNDEFINED':\n    case 'WEIGHT':\n      return null;\n    case 'HIDDEN':\n      return hiddenField(field);\n    case 'TEXT':\n      return textField(field);\n    case 'MULTILINE':\n      return multilineField(field);\n    case 'SELECT':\n      return selectField(field);\n    default:\n      throw new Error(`Unknown field type: ${field.frontend_input}`);\n  }\n};\n","import {\n  ValidationRule,\n  ValidationRuleEnum,\n} from '@/checkout/__generated__/types';\n\nexport type ValidityProps = {\n  accept?: string;\n  max?: string | number;\n  maxLength?: number;\n  min?: string | number;\n  minLength?: number;\n  pattern?: string;\n  required?: boolean;\n};\n\nexport type InputValidation =\n  | 'alphanumeric'\n  | 'alphanumeric-w-space'\n  | 'alphanum-with-spaces'\n  | 'alpha'\n  | 'url'\n  | 'numeric'\n  | 'email';\n\nexport const validityProps = (\n  rules: ValidationRule[]\n): ValidationRule & ValidityProps =>\n  rules.reduce((props, rule) => {\n    switch (rule.name) {\n      case ValidationRuleEnum.DateRangeMax:\n        return { ...props, max: rule.value };\n      case ValidationRuleEnum.DateRangeMin:\n        return { ...props, min: rule.value };\n      case ValidationRuleEnum.FileExtensions:\n        return { ...props, accept: rule.value };\n      case ValidationRuleEnum.InputValidation:\n        return {\n          ...props,\n          pattern: patternFor(rule.value as InputValidation),\n        };\n      case ValidationRuleEnum.MaxFileSize:\n      case ValidationRuleEnum.MaxImageHeight:\n      case ValidationRuleEnum.MaxImageWidth:\n        return props;\n      case ValidationRuleEnum.MaxTextLength:\n        return { ...props, maxLength: rule.value };\n      case ValidationRuleEnum.MinTextLength:\n        return { ...props, minLength: rule.value };\n      default:\n        throw new Error(`Unknown rule: ${rule.name}`);\n    }\n  }, {});\n\nexport type Patterns = {\n  [key in InputValidation]: RegExp;\n};\n\n// TODO allow to override patterns\nexport const patterns: Patterns = {\n  alpha: /^[a-zA-Z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  'alphanumeric-w-space': /^[a-zA-Z0-9 ]+$/,\n  'alphanum-with-spaces': /^[a-zA-Z0-9 ]+$/,\n  email:\n    /^([a-z0-9,!#$%&'*+/=?^_`{|}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!#$%&'*+/=?^_`{|}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i,\n  numeric: /^[0-9]+$/,\n  url: /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w\\-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/,\n};\n\nconst patternFor = (type: InputValidation): string => {\n  switch (type) {\n    case 'alpha':\n      return patterns.alpha.source;\n    case 'alphanumeric':\n      return patterns.alphanumeric.source;\n    case 'alphanumeric-w-space':\n      return patterns['alphanumeric-w-space'].source;\n    case 'alphanum-with-spaces':\n      return patterns['alphanum-with-spaces'].source;\n    case 'url':\n      return patterns.url.source;\n    case 'numeric':\n      return patterns.numeric.source;\n    case 'email':\n      return patterns.email.source;\n    default:\n      throw new Error(`Unknown validation type: ${type}`);\n  }\n};\n","import { FunctionComponent, Ref } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { classes } from '@adobe/elsie/lib';\nimport '@/checkout/components/FieldsForm/FieldsForm.css';\nimport { createField } from './fieldFactory';\nimport { Heading } from '@/checkout/components';\nimport { Text } from '@adobe/elsie/i18n';\nimport { ProcessedFormFields } from '@/checkout/utils';\n\nexport type BaseField = ProcessedFormFields[number] & {\n  id?: string;\n  disabled?: boolean;\n  handleSelect?: (event: Event) => void;\n};\n\nexport interface FieldsFormProps extends HTMLAttributes<HTMLDivElement> {\n  headingId: string;\n  name: string;\n  formRef: Ref<HTMLFormElement>;\n  fields: BaseField[];\n}\n\nexport const FieldsForm: FunctionComponent<FieldsFormProps> = ({\n  className,\n  name,\n  headingId,\n  formRef,\n  fields,\n  ...props\n}) => {\n  return (\n    <div {...props} className={classes(['checkout-fields-form', className])}>\n      <Heading\n        level={2}\n        children={<Text id={headingId} />}\n        className=\"checkout-fields-form__title\"\n      />\n\n      <form\n        name={name}\n        ref={formRef}\n        className={classes(['checkout-fields-form__form', className])}\n        noValidate\n      >\n        {fields\n          .sort((a, b) => {\n            return a.sort_order! - b.sort_order!;\n          })\n          .map(createField)}\n      </form>\n    </div>\n  );\n};\n","import { FunctionComponent } from 'preact';\nimport { Skeleton, SkeletonRow } from '@adobe/elsie/components';\n\nexport const FieldsFormSkeleton: FunctionComponent = (props) => {\n  return (\n    <Skeleton {...props}>\n      <SkeletonRow variant=\"heading\" size=\"medium\" />\n      <SkeletonRow variant=\"empty\" size=\"medium\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" fullWidth={true} />\n      <SkeletonRow size=\"large\" fullWidth={true} lines={3} />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n    </Skeleton>\n  );\n};\n","import { FunctionComponent } from 'preact';\nimport { HTMLAttributes, JSX } from 'preact/compat';\nimport '@/checkout/components/Heading/Heading.css';\n\nexport interface HeadingProps extends Omit<HTMLAttributes<HTMLHeadingElement>, 'level'> {\n  level?: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nexport const Heading: FunctionComponent<HeadingProps> = ({\n  className,\n  children,\n  level = 2,\n}) => {\n  const Heading =\n    level >= 1 && level <= 6\n      ? (`h${level}` as keyof JSX.IntrinsicElements)\n      : 'h2';\n\n  return (\n      <Heading className={className}>\n        {children}\n      </Heading>\n  );\n};\n","import { FormFields, getRegions } from '@/checkout/api';\nimport { FieldsFormSkeleton } from '@/checkout/components';\nimport {\n  DefaultValues,\n  MULTILINE_CUSTOM_ATTR_SPLIT,\n  MULTILINE_SUFFIX,\n  SaveAddressCommand,\n  useAddressForm,\n  usePreselectedFields,\n} from '@/checkout/components/AddressForm';\nimport '@/checkout/components/AddressForm/AddressForm.css';\nimport { FieldsForm as Component } from '@/checkout/components/FieldsForm/FieldsForm';\nimport { PreselectedAddressFields } from '@/checkout/containers';\nimport {\n  useStore,\n  useAddressFormFields,\n  useCountries,\n} from '@/checkout/context';\nimport {\n  AddressFormFields,\n  AddressFormTypes,\n  AddressFormValues,\n  Region,\n} from '@/checkout/data/models';\nimport { cartSignal } from '@/checkout/signals';\nimport { isEmpty, processFormFields } from '@/checkout/utils';\nimport { getFormErrors } from '@adobe/elsie/lib/form-values';\nimport {\n  HTMLAttributes,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'preact/compat';\nimport { StateUpdater } from 'preact/hooks';\n\nfunction useDefaultValues(defaultCountry: string | undefined) {\n  const [defaultValues, setDefaultValues] = useState<DefaultValues>({});\n\n  useEffect(() => {\n    if (!defaultCountry) return;\n    setDefaultValues((defaultValues) => ({\n      ...defaultValues,\n      country_id: defaultCountry,\n    }));\n  }, [defaultCountry]);\n\n  return { defaultValues };\n}\n\nfunction useRegions({\n  country,\n  addressType,\n}: {\n  country: string | undefined;\n  addressType: AddressFormTypes;\n}) {\n  const [availableRegions, setAvailableRegions] = useState<Region[]>([]);\n\n  useEffect(() => {\n    if (!country) {\n      setAvailableRegions([]);\n      return;\n    }\n\n    getRegions(country, addressType)\n      .then((data) => {\n        setAvailableRegions(data || []);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [setAvailableRegions, country, addressType]);\n\n  return { availableRegions };\n}\n\nfunction useFormFill({\n  shouldAutoFillForm,\n  addressType,\n  setAddress,\n  fields,\n}: {\n  shouldAutoFillForm?: () => boolean;\n  addressType: AddressFormTypes;\n  setAddress: StateUpdater<AddressFormValues>;\n  fields?: FormFields;\n}) {\n  const [hasFormFillCompleted, setHasFormFillCompleted] = useState(false);\n  const cartData = cartSignal.value.data;\n\n  useEffect(() => {\n    if (hasFormFillCompleted) return;\n\n    const isReadyToProcess = cartData && fields;\n    if (!isReadyToProcess) return;\n\n    setHasFormFillCompleted(true);\n\n    const addressData =\n      addressType === AddressFormTypes.SHIPPING\n        ? cartData?.shippingAddresses\n        : cartData?.billingAddress;\n\n    const isAnAddressList = Array.isArray(addressData);\n    const hasAddressData = isAnAddressList\n      ? addressData.length > 0\n      : !!addressData;\n\n    if (!hasAddressData) return;\n    if (shouldAutoFillForm && !shouldAutoFillForm()) return;\n\n    const isMultiline = (code: string) => {\n      if (!fields) return false;\n      const field = fields.find((field) => field.code === code);\n      if (!field) return false;\n      return field.frontend_input === 'MULTILINE';\n    };\n\n    const firstAddress = Array.isArray(addressData)\n      ? addressData[0]\n      : addressData;\n\n    if (!firstAddress) return;\n\n    const addressFormValues: AddressFormValues = {\n      [AddressFormFields.City]: firstAddress.city,\n      [AddressFormFields.Company]: firstAddress.company || '',\n      [AddressFormFields.Country]: firstAddress.country.value,\n      [AddressFormFields.FirstName]: firstAddress.firstName,\n      [AddressFormFields.LastName]: firstAddress.lastName,\n      [AddressFormFields.PostCode]: firstAddress.postCode || '',\n      [AddressFormFields.Telephone]: firstAddress.telephone || '',\n      [AddressFormFields.Vat]: firstAddress.vatId || '',\n    };\n\n    const region = firstAddress.region;\n\n    if (region) {\n      const regionId = region?.id?.toString();\n\n      if (regionId) {\n        addressFormValues[AddressFormFields.Region] = regionId;\n        addressFormValues[AddressFormFields.RegionId] = regionId;\n      } else {\n        addressFormValues[AddressFormFields.Region] = region.code;\n      }\n    }\n\n    if (firstAddress?.street && firstAddress.street.length > 0) {\n      firstAddress.street.forEach((street, index) => {\n        addressFormValues[\n          `${AddressFormFields.Street}${MULTILINE_SUFFIX}${index}`\n        ] = street!;\n      });\n    }\n\n    const customAttributes = firstAddress?.customAttributes || [];\n\n    customAttributes.forEach((attribute) => {\n      if (!isMultiline(attribute.code)) {\n        addressFormValues[attribute.code] = attribute.value;\n      } else {\n        const values = attribute.value.split(MULTILINE_CUSTOM_ATTR_SPLIT);\n        values.forEach((value, index) => {\n          addressFormValues[`${attribute.code}${MULTILINE_SUFFIX}${index}`] =\n            value;\n        });\n      }\n    });\n\n    setAddress(addressFormValues);\n  }, [\n    setAddress,\n    shouldAutoFillForm,\n    addressType,\n    cartData,\n    fields,\n    hasFormFillCompleted,\n  ]);\n}\n\nexport interface AddressFormProps extends HTMLAttributes<HTMLDivElement> {\n  name: string;\n  preselectedFields?: PreselectedAddressFields;\n  addressType: AddressFormTypes;\n  headingId: string;\n  saveAddressHandler: (\n    command: SaveAddressCommand\n  ) => Promise<typeof cartSignal.value.data>;\n  shouldAutoFillForm?: () => boolean;\n}\n\nexport type AddressFormHandle = {\n  triggerSaveAddress: (\n    signal: AbortSignal\n  ) => Promise<typeof cartSignal.value.data> | undefined;\n};\n\nexport const AddressForm = forwardRef<AddressFormHandle, AddressFormProps>(\n  (\n    {\n      name,\n      preselectedFields,\n      addressType,\n      headingId,\n      saveAddressHandler,\n      children,\n      shouldAutoFillForm,\n      ...props\n    },\n    ref\n  ) => {\n    const { fields } = useAddressFormFields();\n    const { countries: availableCountries } = useCountries();\n    const isLoadingCountries = availableCountries === undefined;\n    const isLoadingFormFields = fields === undefined;\n\n    const { config } = useStore();\n    const isLoadingStoreConfig = config === undefined;\n\n    const { defaultValues } = useDefaultValues(config?.defaultCountry);\n\n    const { preselection } = usePreselectedFields({\n      fields,\n      preselectedFields,\n    });\n\n    const formRef = useRef<HTMLFormElement>(null);\n\n    const {\n      address,\n      setAddress,\n      onSelection,\n      errors,\n      onChange,\n      onInvalid,\n      onBlur,\n    } = useAddressForm({\n      formRef,\n      type: addressType,\n      defaultValues,\n      preselection,\n      saveAddressHandler,\n    });\n\n    const { availableRegions } = useRegions({\n      country: address.country_id,\n      addressType,\n    });\n\n    useImperativeHandle(ref, () => ({\n      triggerSaveAddress: (signal: AbortSignal) => {\n        if (!formRef.current) return;\n        const errors = getFormErrors(formRef.current);\n        if (!isEmpty(errors)) return;\n        return saveAddressHandler({ signal, address });\n      },\n    }));\n\n    useFormFill({\n      shouldAutoFillForm,\n      addressType,\n      setAddress,\n      fields,\n    });\n\n    const isLoading =\n      isLoadingFormFields || isLoadingCountries || isLoadingStoreConfig;\n\n    if (isLoading) {\n      return <FieldsFormSkeleton data-testid={`${addressType}-skeleton`} />;\n    }\n\n    const transformedFields = processFormFields({\n      fields,\n      address,\n      setAddress,\n      addressType,\n      errors,\n      config,\n      availableCountries,\n      availableRegions,\n      onSelection,\n      onChange,\n      onBlur,\n      onInvalid,\n    });\n\n    const typeMapping = {\n      [AddressFormTypes.SHIPPING]: 'shipping',\n      [AddressFormTypes.BILLING]: 'billing',\n    };\n\n    return (\n      <Component\n        {...props}\n        data-testid={`${typeMapping[addressType]}-form`}\n        name={name}\n        className={`checkout-${typeMapping[addressType]}-form`}\n        headingId={headingId}\n        formRef={formRef}\n        fields={transformedFields}\n      />\n    );\n  }\n);\n","import { useCallback, useEffect, useState } from 'preact/hooks';\nimport { useServices } from '@/checkout/context';\nimport { events } from '@adobe/event-bus';\nimport { DEBOUNCE_TIME } from './constants';\nimport {\n  AddressFormTypes,\n  AddressFormValues,\n} from '@/checkout/data/models/address-form';\n\nexport function useAddressBackup(addressType: AddressFormTypes) {\n  const { backupService } = useServices();\n  const [addressBackup, setAddressBackup] = useState<AddressFormValues | null>(\n    null\n  );\n\n  // restore address from local storage\n  useEffect(() => {\n    const backup = backupService.restore<AddressFormValues>(addressType);\n    if (!backup) return;\n    setAddressBackup(backup);\n  }, [addressType, backupService]);\n\n  // remove backup when the order is placed\n  useEffect(() => {\n    const onOrder = events.on('checkout/order', () => {\n      backupService.remove(addressType);\n    });\n\n    return () => {\n      onOrder?.off();\n    };\n  }, [addressType, backupService]);\n\n  const backup = useCallback(\n    (address: AddressFormValues) => {\n      return setTimeout(() => {\n        // we do not want to update the state to avoid re-rendering\n        backupService.backup<AddressFormValues>(addressType, address);\n      }, DEBOUNCE_TIME);\n    },\n    [addressType, backupService]\n  );\n\n  const removeBackup = useCallback(() => {\n    backupService.remove(addressType);\n  }, [addressType, backupService]);\n\n  return { addressBackup, backup, removeBackup };\n}\n","import { useCallback, useState } from 'preact/hooks';\n\nexport type Translations = {\n  badInput: string;\n  patternMismatch: string;\n  rangeOverflow: string;\n  rangeUnderflow: string;\n  tooLong: string;\n  tooShort: string;\n  typeMismatch: string;\n  valueMissing: string;\n};\n\ntype FormElement = HTMLInputElement | HTMLSelectElement;\n\ntype Constraint =\n  | 'badInput'\n  | 'patternMismatch'\n  | 'rangeOverflow'\n  | 'rangeUnderflow'\n  | 'tooLong'\n  | 'tooShort'\n  | 'typeMismatch'\n  | 'valueMissing';\n\ntype Attribute = 'aria-label' | 'maxlength' | 'minlength' | 'min' | 'max';\n\nconst attributesMapping: Record<Constraint, Attribute> = {\n  badInput: 'aria-label',\n  patternMismatch: 'aria-label',\n  rangeOverflow: 'max',\n  rangeUnderflow: 'min',\n  tooLong: 'maxlength',\n  tooShort: 'minlength',\n  typeMismatch: 'aria-label',\n  valueMissing: 'aria-label',\n};\n\nconst constraints: Constraint[] = [\n  'badInput',\n  'patternMismatch',\n  'rangeOverflow',\n  'rangeUnderflow',\n  'tooLong',\n  'tooShort',\n  'typeMismatch',\n  'valueMissing',\n];\n\nexport const useValidity = (translations: Translations) => {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const validateFormElement = useCallback(\n    (formElement: FormElement) => {\n      const { name, validity, validationMessage } = formElement;\n\n      let error = validity.valid ? '' : validationMessage;\n\n      constraints.forEach((constraint) => {\n        if (!validity[constraint]) return;\n        const translation = translations[constraint];\n        if (!translation) return;\n        const attribute = attributesMapping[constraint];\n        error = translation.replace(\n          '{field}',\n          formElement.getAttribute(attribute) || ''\n        );\n      });\n\n      setErrors((prevErrors) => ({ ...prevErrors, [name]: error }));\n    },\n    [translations]\n  );\n\n  return {\n    errors,\n    validateFormElement,\n  };\n};\n","import { PreselectedMappedField } from '@/checkout/components/AddressForm';\nimport { DEBOUNCE_TIME } from '@/checkout/components/AddressForm/constants';\nimport { useAddressBackup } from '@/checkout/components/AddressForm/useAddressBackup';\nimport {\n  AddressFormErrors,\n  AddressFormTypes,\n  AddressFormValues,\n} from '@/checkout/data/models';\nimport {\n  Translations as ValidityTranslations,\n  useValidity,\n} from '@/checkout/hooks/useValidity';\nimport { cartSignal } from '@/checkout/signals';\nimport { isEmpty } from '@/checkout/utils';\nimport { useText } from '@adobe/elsie/i18n';\nimport { getFormErrors } from '@adobe/elsie/lib';\nimport { RefObject } from 'preact';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\n\nexport type DefaultValues = {\n  country_id?: string;\n};\n\nexport type AddressFormState = {\n  address: AddressFormValues;\n  errors: AddressFormErrors;\n};\n\nexport type SaveAddressCommand = {\n  signal?: AbortSignal;\n  address: AddressFormValues;\n};\n\nexport type UseAddressFormProps = {\n  formRef: RefObject<HTMLFormElement>;\n  type: AddressFormTypes;\n  defaultValues?: DefaultValues;\n  preselection?: PreselectedMappedField | null;\n  saveAddressHandler: (\n    command: SaveAddressCommand\n  ) => Promise<typeof cartSignal.value.data>;\n};\n\nconst isFormValid = (formRef: RefObject<HTMLFormElement>): boolean => {\n  const form = formRef.current;\n  if (!form) return false;\n  const errors = getFormErrors(form);\n  return isEmpty(errors);\n};\n\nexport const useAddressForm = ({\n  formRef,\n  type,\n  defaultValues = {},\n  preselection = {},\n  saveAddressHandler,\n}: UseAddressFormProps) => {\n  const translations = useText({\n    badInput: 'Checkout.AddressForm.Validity.badInput',\n    patternMismatch: 'Checkout.AddressForm.Validity.patternMismatch',\n    rangeUnderflow: 'Checkout.AddressForm.Validity.rangeUnderflow',\n    tooLong: 'Checkout.AddressForm.Validity.tooLong',\n    tooShort: 'Checkout.AddressForm.Validity.tooShort',\n    typeMismatch: 'Checkout.AddressForm.Validity.typeMismatch',\n    valueMissing: 'Checkout.AddressForm.Validity.valueMissing',\n  }) as ValidityTranslations;\n\n  const hasUnsavedChanges = useRef(false);\n  const [address, setAddress] = useState<AddressFormValues>({});\n\n  const { addressBackup, backup, removeBackup } = useAddressBackup(type);\n\n  const { errors, validateFormElement } = useValidity(translations);\n\n  const saveAddressForm = useCallback(\n    (command: SaveAddressCommand) => {\n      hasUnsavedChanges.current = false;\n      saveAddressHandler(command)\n        .then(() => {\n          removeBackup();\n        })\n        .catch((error) => {\n          hasUnsavedChanges.current = true;\n          console.error('Saving address form failed:', error);\n        });\n    },\n    [removeBackup, saveAddressHandler]\n  );\n\n  const updateField = (code: string, value: string) => {\n    setAddress((prevAddress) => ({\n      ...prevAddress,\n      [code]: value,\n    }));\n    hasUnsavedChanges.current = true;\n  };\n\n  const onChange = (event: Event) => {\n    const target = event.target as HTMLInputElement;\n    const { name, value } = target;\n\n    updateField(name, value);\n\n    validateFormElement(target);\n  };\n\n  const onInvalid = (event: Event) => {\n    const target = event.target as HTMLInputElement | HTMLSelectElement;\n\n    validateFormElement(target);\n  };\n\n  const onSelection = (event: Event) => {\n    const target = event.target as HTMLSelectElement;\n    const { name, value } = target;\n    updateField(name, value);\n    validateFormElement(target);\n  };\n\n  const onBlur = (event: Event) => {\n    const target = event.target as HTMLInputElement | HTMLSelectElement;\n\n    target.checkValidity();\n  };\n\n  // load default, preselected and backup address\n  useEffect(() => {\n    setAddress((prevAddress) => {\n      return {\n        ...defaultValues,\n        ...preselection,\n        ...addressBackup,\n        ...prevAddress,\n      };\n    });\n  }, [defaultValues, preselection, addressBackup]);\n\n  // backup address\n  useEffect(() => {\n    if (!hasUnsavedChanges.current) return;\n    const timerId = backup(address);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [address, backup]);\n\n  // sync address with the backend\n  useEffect(() => {\n    if (!hasUnsavedChanges.current || !isFormValid(formRef)) return;\n\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const timer = setTimeout(() => {\n      saveAddressForm({ signal, address });\n    }, DEBOUNCE_TIME);\n\n    return () => {\n      clearTimeout(timer);\n      controller.abort();\n    };\n  }, [address, formRef, saveAddressForm]);\n\n  return {\n    address,\n    setAddress,\n    errors,\n    onChange,\n    onSelection,\n    onBlur,\n    onInvalid,\n  };\n};\n","import { FormFields } from '@/checkout/api';\nimport { PreselectedAddressFields } from '@/checkout/containers';\nimport { useMemo } from 'preact/hooks';\n\ntype PreselectedFieldKey = keyof PreselectedAddressFields;\n\nexport type PreselectedMappedField = {\n  country_id?: string;\n  region?: string;\n  postcode?: string;\n};\n\ntype PreselectedMappedFieldKey = keyof PreselectedMappedField;\n\nconst FIELD_CODE_MAPPING: {\n  [key in PreselectedFieldKey]: PreselectedMappedFieldKey;\n} = {\n  countryCode: 'country_id',\n  region: 'region',\n  postCode: 'postcode',\n};\n\nexport type UsePreselectedFieldsProps = {\n  fields?: FormFields;\n  preselectedFields?: PreselectedAddressFields;\n};\n\nexport function usePreselectedFields({\n  fields,\n  preselectedFields,\n}: UsePreselectedFieldsProps) {\n  const preselection =\n    useMemo(() => {\n      const hasFields = !!fields && fields.length > 0;\n      const hasPreselectedFields = !!preselectedFields;\n\n      if (!hasFields || !hasPreselectedFields) return null;\n\n      return Object.keys(preselectedFields).reduce((acc, code) => {\n        const formCode = FIELD_CODE_MAPPING[code as PreselectedFieldKey];\n        if (!formCode) return acc;\n\n        const formField = fields.some((field) => field.code === formCode);\n        if (!formField) return acc;\n\n        return {\n          ...acc,\n          [formCode]: preselectedFields[code as PreselectedFieldKey],\n        };\n      }, {} as PreselectedMappedField);\n    }, [fields, preselectedFields]);\n\n  return { preselection };\n}\n"],"names":["getFormErrors","form","formData","FormData","data","Object","fromEntries","result","entries","reduce","key","field","elements","validationMessage","debounce","fn","ms","timeoutId","args","clearTimeout","setTimeout","apply","autocompleteFieldCodes","firstname","lastname","company","country","region","city","postcode","telephone","street","email","middlename","prefix","suffix","isEmpty","obj","keys","length","constructor","isValidOption","option","label","value","transformFormFieldOptions","filter","map","text","transformRegionOptions","regions","id","toString","code","name","transformCountryOptions","countries","processFormFields","fields","address","setAddress","addressType","errors","config","availableCountries","availableRegions","onSelection","onChange","onBlur","onInvalid","resetRegion","AddressFormFields","Region","RegionId","syncRegionId","regionId","is_required","inputType","frontend_input","options","error","handleSelect","disabled","getMultilineValues","Country","AddressFormTypes","SHIPPING","regionsSignal","event","target","refetchEstimatedShippingMethods","country_code","selectedRegionId","pending","countriesWithRequiredRegion","includes","country_id","displayStateIfOptional","AttributeFrontendInputEnum","Undefined","Select","Text","selectedRegion","region_id","defaultOnChange","region_name","find","regionOption","PostCode","countriesWithOptionalZipCode","className","estimateShipppingTimer","criteria","cartData","cartSignal","hasCartData","firstAddress","shippingAddresses","availableShippingMethods","estimateShippingMethods","cartId","DEBOUNCE_TIME","Input","variant","floatingLabel","onValue","onUpdateError","size","icon","maxLength","success","props","Math","random","debouncedOnValueHandler","useCallback","newValue","e","handleOnValue","input","trim","_jsxs","classes","children","_jsx","VComponent","node","type","htmlFor","Icon","source","WarningWithCircle","stroke","viewBox","CheckWithCircle","Picker","placeholder","defaultOption","firstAvailableeOption","selectedValue","setSelectedValue","useState","useEffect","selected","handleOptionClick","element","optionsListItems","placeholderOptionRef","useRef","current","ref","ChevronDown","Field","hint","ChildComponent","_createElement","useBreakpoint","getBreakpoint","window","innerWidth","breakpoint","setBreakpoint","handleResize","addEventListener","removeEventListener","ConditionalWrapper","_Fragment","Aside","sections","orderSummary","cartSummary","MainContent","billingAddress","billToShippingAddress","login","paymentMethods","placeOrder","shippingAddress","shippingMethods","Main","outOfStock","Heading","level","Checkout","banner","restProps","hiddenField","default_value","textField","validate_rules","validity","validityProps","fieldID","autocomplete","required","undefined","multilineField","multiline_count","numOfFields","Array","from","i","selectField","handleSelectAttribute","createField","Error","rules","rule","ValidationRuleEnum","DateRangeMax","max","DateRangeMin","min","FileExtensions","accept","InputValidation","pattern","patternFor","MaxFileSize","MaxImageHeight","MaxImageWidth","MaxTextLength","MinTextLength","minLength","patterns","alpha","alphanumeric","numeric","url","FieldsForm","headingId","formRef","noValidate","sort","a","b","sort_order","FieldsFormSkeleton","Skeleton","SkeletonRow","fullWidth","lines","useDefaultValues","defaultCountry","defaultValues","setDefaultValues","useRegions","setAvailableRegions","getRegions","then","catch","console","useFormFill","shouldAutoFillForm","hasFormFillCompleted","setHasFormFillCompleted","addressData","isArray","isMultiline","addressFormValues","City","Company","FirstName","firstName","LastName","lastName","postCode","Telephone","Vat","vatId","forEach","index","Street","MULTILINE_SUFFIX","customAttributes","attribute","split","MULTILINE_CUSTOM_ATTR_SPLIT","AddressForm","forwardRef","preselectedFields","saveAddressHandler","useAddressFormFields","useCountries","isLoadingCountries","isLoadingFormFields","useStore","isLoadingStoreConfig","preselection","usePreselectedFields","useAddressForm","useImperativeHandle","triggerSaveAddress","signal","transformedFields","typeMapping","BILLING","Component","useAddressBackup","backupService","useServices","addressBackup","setAddressBackup","backup","restore","onOrder","events","on","remove","off","removeBackup","attributesMapping","badInput","patternMismatch","rangeOverflow","rangeUnderflow","tooLong","tooShort","typeMismatch","valueMissing","constraints","useValidity","translations","setErrors","validateFormElement","formElement","valid","constraint","translation","replace","getAttribute","prevErrors","isFormValid","useText","hasUnsavedChanges","saveAddressForm","command","updateField","prevAddress","checkValidity","timerId","controller","AbortController","timer","abort","FIELD_CODE_MAPPING","countryCode","useMemo","acc","formCode","some"],"mappings":"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"}