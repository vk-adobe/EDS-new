{"version":3,"file":"fetch-graphql.js","sources":["../../fetch-graphql/src/index.ts"],"sourcesContent":["export type Header = { [key: string]: string | null };\n\nexport type FetchOptions = {\n  method?: 'GET' | 'POST';\n  variables?: { [key: string]: any };\n  signal?: AbortSignal;\n  cache?:\n    | 'default'\n    | 'no-store'\n    | 'reload'\n    | 'no-cache'\n    | 'force-cache'\n    | 'only-if-cached';\n};\n\nexport type FetchQueryError = Array<{\n  message: string;\n  extensions: { category: string };\n}>;\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n};\n\nclass FetchGraphQLMesh {\n  public _endpoint?: string;\n\n  get endpoint() {\n    return this._endpoint;\n  }\n\n  get fetchGraphQlHeaders() {\n    return this._fetchGraphQlHeaders;\n  }\n\n  public _fetchGraphQlHeaders: Header | undefined;\n\n  public setEndpoint(endpoint: string) {\n    this._endpoint = endpoint;\n  }\n\n  public setFetchGraphQlHeader(key: string, value: string | null) {\n    this._fetchGraphQlHeaders = {\n      ...this.fetchGraphQlHeaders,\n      [key]: value,\n    };\n  }\n\n  public removeFetchGraphQlHeader(key: string) {\n    delete this._fetchGraphQlHeaders?.[key];\n  }\n\n  public setFetchGraphQlHeaders(header: Header) {\n    this._fetchGraphQlHeaders = { ...header };\n  }\n\n  public async fetchGraphQl<T = any>(\n    query: string,\n    options?: FetchOptions\n  ): Promise<{ errors?: FetchQueryError; data: T }> {\n    const endpoint = this.endpoint;\n    const fetchGraphQlHeaders = this.fetchGraphQlHeaders;\n\n    if (!endpoint) throw Error('Missing \"url\"');\n\n    const method = options?.method ?? 'POST';\n    const cache = options?.cache;\n    const signal = options?.signal;\n\n    let body;\n    const url = new URL(endpoint);\n    const headers = {\n      ...defaultHeaders,\n      ...fetchGraphQlHeaders,\n    };\n\n    if (method === 'POST') {\n      body = JSON.stringify({\n        query,\n        variables: options?.variables,\n      });\n    }\n\n    if (method === 'GET') {\n      url.searchParams.append('query', minimizeGraphQlQuery(query));\n\n      if (options?.variables)\n        url.searchParams.append('variables', JSON.stringify(options.variables));\n    }\n\n    return await fetch(url, {\n      method,\n      headers,\n      body,\n      cache,\n      signal,\n    }).then((r) => r.json());\n  }\n\n  public getConfig() {\n    return {\n      endpoint: this.endpoint,\n      fetchGraphQlHeaders: this.fetchGraphQlHeaders,\n    };\n  }\n\n  public getMethods() {\n    return {\n      setEndpoint: this.setEndpoint.bind(this),\n      setFetchGraphQlHeader: this.setFetchGraphQlHeader.bind(this),\n      removeFetchGraphQlHeader: this.removeFetchGraphQlHeader.bind(this),\n      setFetchGraphQlHeaders: this.setFetchGraphQlHeaders.bind(this),\n      fetchGraphQl: this.fetchGraphQl.bind(this),\n      getConfig: this.getConfig.bind(this),\n    };\n  }\n}\n\nconst mesh = new FetchGraphQLMesh();\n\nexport class FetchGraphQL extends FetchGraphQLMesh {\n  get endpoint() {\n    return this._endpoint ?? mesh.endpoint;\n  }\n\n  get fetchGraphQlHeaders() {\n    return (\n      (this._endpoint\n        ? this._fetchGraphQlHeaders\n        : { ...this._fetchGraphQlHeaders, ...mesh.fetchGraphQlHeaders }) || {}\n    );\n  }\n}\n\nfunction minimizeGraphQlQuery(query: string) {\n  // Remove comments\n  query = query.replace(/#.*/g, '');\n\n  // Remove extra spaces, tabs, and line breaks\n  query = query.replace(/\\s+/g, ' ');\n\n  return query.trim();\n}\n\n// Global Mesh instance\nexport const {\n  setEndpoint,\n  setFetchGraphQlHeaders,\n  setFetchGraphQlHeader,\n  removeFetchGraphQlHeader,\n  fetchGraphQl,\n  getConfig,\n} = mesh.getMethods();\n"],"names":["defaultHeaders","Accept","FetchGraphQLMesh","_endpoint","_fetchGraphQlHeaders","endpoint","fetchGraphQlHeaders","setEndpoint","setFetchGraphQlHeader","key","value","removeFetchGraphQlHeader","_a","setFetchGraphQlHeaders","header","fetchGraphQl","query","options","Error","method","cache","signal","body","url","URL","headers","JSON","stringify","variables","searchParams","append","minimizeGraphQlQuery","fetch","then","r","json","getConfig","getMethods","bind","mesh","FetchGraphQL","replace","trim"],"mappings":"wKAoBA,MAAMA,EAAiB,CACrB,eAAgB,mBAChBC,OAAQ,kBACV,EAEA,MAAMC,CAAiB,CAAvB,cACSC,EAAAA,kBAUAC,EAAAA,6BARP,IAAIC,UAAW,CACb,OAAO,KAAKF,SACd,CAEA,IAAIG,qBAAsB,CACxB,OAAO,KAAKF,oBACd,CAIOG,YAAYF,EAAkB,CACnC,KAAKF,UAAYE,CACnB,CAEOG,sBAAsBC,EAAaC,EAAsB,CAC9D,KAAKN,qBAAuB,CAC1B,GAAG,KAAKE,oBACR,CAACG,CAAG,EAAGC,CAAAA,CAEX,CAEOC,yBAAyBF,EAAa,CA7B/C,IAAAG,GA8BWA,EAAA,KAAKR,uBAAL,aAAAQ,EAA4BH,EACrC,CAEOI,uBAAuBC,EAAgB,CAC5C,KAAKV,qBAAuB,CAAE,GAAGU,CAAAA,CACnC,CAEA,MAAaC,aACXC,EACAC,EACgD,CAChD,MAAMZ,EAAW,KAAKA,SAChBC,EAAsB,KAAKA,oBAEjC,GAAI,CAACD,EAAU,MAAMa,MAAM,eAAe,EAEpCC,MAAAA,GAASF,GAAAA,YAAAA,EAASE,SAAU,OAC5BC,EAAQH,GAAAA,YAAAA,EAASG,MACjBC,EAASJ,GAAAA,YAAAA,EAASI,OAEpBC,IAAAA,EACEC,MAAAA,EAAM,IAAIC,IAAInB,CAAQ,EACtBoB,EAAU,CACd,GAAGzB,EACH,GAAGM,CAAAA,EAGL,OAAIa,IAAW,SACbG,EAAOI,KAAKC,UAAU,CACpBX,MAAAA,EACAY,UAAWX,GAAAA,YAAAA,EAASW,SAAAA,CACrB,GAGCT,IAAW,QACbI,EAAIM,aAAaC,OAAO,QAASC,EAAqBf,CAAK,CAAC,EAExDC,GAAAA,MAAAA,EAASW,WACXL,EAAIM,aAAaC,OAAO,YAAaJ,KAAKC,UAAUV,EAAQW,SAAS,CAAC,GAGnE,MAAMI,MAAMT,EAAK,CACtBJ,OAAAA,EACAM,QAAAA,EACAH,KAAAA,EACAF,MAAAA,EACAC,OAAAA,CAAAA,CACD,EAAEY,KAAYC,GAAAA,EAAEC,KAAM,CAAA,CACzB,CAEOC,WAAY,CACV,MAAA,CACL/B,SAAU,KAAKA,SACfC,oBAAqB,KAAKA,mBAAAA,CAE9B,CAEO+B,YAAa,CACX,MAAA,CACL9B,YAAa,KAAKA,YAAY+B,KAAK,IAAI,EACvC9B,sBAAuB,KAAKA,sBAAsB8B,KAAK,IAAI,EAC3D3B,yBAA0B,KAAKA,yBAAyB2B,KAAK,IAAI,EACjEzB,uBAAwB,KAAKA,uBAAuByB,KAAK,IAAI,EAC7DvB,aAAc,KAAKA,aAAauB,KAAK,IAAI,EACzCF,UAAW,KAAKA,UAAUE,KAAK,IAAI,CAAA,CAEvC,CACF,CAEA,MAAMC,EAAO,IAAIrC,EAEV,MAAMsC,UAAqBtC,CAAiB,CACjD,IAAIG,UAAW,CACN,OAAA,KAAKF,WAAaoC,EAAKlC,QAChC,CAEA,IAAIC,qBAAsB,CAErB,OAAA,KAAKH,UACF,KAAKC,qBACL,CAAE,GAAG,KAAKA,qBAAsB,GAAGmC,EAAKjC,uBAA0B,EAE1E,CACF,CAEA,SAASyB,EAAqBf,EAAe,CAEnCA,OAAAA,EAAAA,EAAMyB,QAAQ,OAAQ,EAAE,EAGxBzB,EAAAA,EAAMyB,QAAQ,OAAQ,GAAG,EAE1BzB,EAAM0B,MACf,CAGa,KAAA,CACXnC,YAAAA,EACAM,uBAAAA,EACAL,sBAAAA,EACAG,yBAAAA,EACAI,aAAAA,EACAqB,UAAAA,CACF,EAAIG,EAAKF,WAAW"}