{"version":3,"file":"getEstimateShipping.js","sources":["../src/api/getEstimateShipping/graphql/estimateShippingMethodsMutation.ts","../src/api/getEstimateShipping/graphql/countriesAndRegionsQueries.ts","../src/api/getEstimateShipping/getEstimateShipping.ts"],"sourcesContent":["export const ESTIMATE_SHIPPING_METHODS_MUTATION = `\n  mutation ESTIMATE_SHIPPING_METHODS_MUTATION(\n    $cartId: String!\n    $address: EstimateAddressInput!\n  ) {\n    estimateShippingMethods(\n      input: {\n        cart_id: $cartId\n        address: $address\n      }\n    ) {\n      amount {\n        currency\n        value\n      }\n      error_message\n    }\n  }\n`;\n","export const COUNTRIES_QUERY = `\nquery COUNTRIES_QUERY {\n  countries {\n    label: full_name_locale\n    id\n  }\n  storeConfig {\n    defaultCountry: default_country\n  }\n}\n`;\n\nexport const REGIONS_QUERY = `\nquery REGIONS_QUERY($id: String) {\n  country(id: $id) {\n    available_regions {\n      code\n\t\t\tname\n    }\n  }\n}\n`;\n\nexport type CountryData = {\n  label: string;\n  id: string;\n  available_regions?: Array<{\n    code: string;\n    name: string;\n  }>;\n  isDefaultCountry?: boolean\n};\n","import { state } from '@/cart/lib/state';\nimport { fetchGraphQl } from '@/cart/api';\nimport { handleFetchError } from '@/cart/lib/fetch-error';\n\nimport { ESTIMATE_SHIPPING_METHODS_MUTATION } from './graphql/estimateShippingMethodsMutation';\nimport {\n  COUNTRIES_QUERY,\n  CountryData,\n  REGIONS_QUERY,\n} from './graphql/countriesAndRegionsQueries';\n\nexport interface EstimateAddressInput {\n  countryCode: string;\n  postcode?: string;\n  region?: {\n    code?: string;\n  };\n}\n\nexport const getEstimateShipping = async (\n  address: EstimateAddressInput\n): Promise<any | null> => {\n  const cartId = state.cartId;\n\n  if (!cartId) throw new Error('No cart ID found');\n  if (!address) throw new Error('No address parameter found');\n\n  const { countryCode, postcode, region } = address;\n\n  return fetchGraphQl(ESTIMATE_SHIPPING_METHODS_MUTATION, {\n    variables: {\n      cartId,\n      address: {\n        country_code: countryCode || 'US',\n        postcode: postcode || '',\n        region: {\n          region_code: region?.code || '',\n        },\n      },\n    },\n  }).then(({ errors, data }) => {\n    if (errors) return handleFetchError(errors);\n\n    const estimateShippingMethods: Array<any> = data.estimateShippingMethods;\n\n    if (estimateShippingMethods.length === 0) {\n      return null;\n    }\n\n    return estimateShippingMethods.find((method) => !method.error_message);\n  });\n};\n\nexport const getCountries = async (): Promise<[CountryData]> => {\n  return fetchGraphQl(COUNTRIES_QUERY, {}).then(({ errors, data }) => {\n    if (errors) return handleFetchError(errors);\n\n    const sortedCountries =\n      data?.countries?.sort((a: any, b: any) =>\n        a.label.localeCompare(b.label)\n      ) || [];\n\n    const defaultCountry = data?.storeConfig?.defaultCountry || 'US';\n\n    // Set the default country property\n    sortedCountries.forEach((country: any) => {\n      country.isDefaultCountry = country.id === defaultCountry;\n    });\n\n    return sortedCountries;\n  });\n};\n\nexport const getRegions = async (\n  countryId: string\n): Promise<Array<{ code: string; name: string }>> => {\n  return fetchGraphQl(REGIONS_QUERY, {\n    variables: {\n      id: countryId,\n    },\n  }).then(({ errors, data }) => {\n    if (errors) return handleFetchError(errors);\n\n    return data?.country?.available_regions || [];\n  });\n};\n"],"names":["ESTIMATE_SHIPPING_METHODS_MUTATION","COUNTRIES_QUERY","REGIONS_QUERY","getEstimateShipping","address","cartId","state","Error","countryCode","postcode","region","fetchGraphQl","variables","country_code","region_code","code","then","errors","data","handleFetchError","estimateShippingMethods","length","find","method","error_message","getCountries","sortedCountries","countries","sort","a","b","label","localeCompare","defaultCountry","storeConfig","forEach","country","isDefaultCountry","id","getRegions","countryId","available_regions"],"mappings":"0FAAO,MAAMA,EAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECAtCC,EAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYnBC,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECOjBC,EAAsB,MACjCC,GACwB,CACxB,MAAMC,EAASC,EAAMD,OAErB,GAAI,CAACA,EAAc,MAAA,IAAIE,MAAM,kBAAkB,EAC/C,GAAI,CAACH,EAAe,MAAA,IAAIG,MAAM,4BAA4B,EAEpD,KAAA,CAAEC,YAAAA,EAAaC,SAAAA,EAAUC,OAAAA,CAAWN,EAAAA,EAE1C,OAAOO,EAAaX,EAAoC,CACtDY,UAAW,CACTP,OAAAA,EACAD,QAAS,CACPS,aAAcL,GAAe,KAC7BC,SAAUA,GAAY,GACtBC,OAAQ,CACNI,aAAaJ,GAAAA,YAAAA,EAAQK,OAAQ,EAC/B,CACF,CACF,CAAA,CACD,EAAEC,KAAK,CAAC,CAAEC,OAAAA,EAAQC,KAAAA,CAAAA,IAAW,CACxBD,GAAAA,EAAQ,OAAOE,EAAiBF,CAAM,EAE1C,MAAMG,EAAsCF,EAAKE,wBAE7CA,OAAAA,EAAwBC,SAAW,EAC9B,KAGFD,EAAwBE,KAAiBC,GAAA,CAACA,EAAOC,aAAa,CAAA,CACtE,CACH,EAEaC,EAAe,SACnBd,EAAaV,EAAiB,EAAE,EAAEe,KAAK,CAAC,CAAEC,OAAAA,EAAQC,KAAAA,CAAAA,IAAW,SAC9DD,GAAAA,EAAQ,OAAOE,EAAiBF,CAAM,EAE1C,MAAMS,IACJR,EAAAA,GAAAA,YAAAA,EAAMS,YAANT,YAAAA,EAAiBU,KAAK,CAACC,EAAQC,IAC7BD,EAAEE,MAAMC,cAAcF,EAAEC,KAAK,KAC1B,CAAA,EAEDE,IAAiBf,EAAAA,GAAAA,YAAAA,EAAMgB,cAANhB,YAAAA,EAAmBe,iBAAkB,KAG5CE,OAAAA,EAAAA,QAASC,GAAiB,CAChCC,EAAAA,iBAAmBD,EAAQE,KAAOL,CAAAA,CAC3C,EAEMP,CAAAA,CACR,EAGUa,EAAa,MACxBC,GAEO7B,EAAaT,EAAe,CACjCU,UAAW,CACT0B,GAAIE,CACN,CAAA,CACD,EAAExB,KAAK,CAAC,CAAEC,OAAAA,EAAQC,KAAAA,CAAAA,IAAW,OACxBD,OAAAA,EAAeE,EAAiBF,CAAM,IAEnCC,EAAAA,GAAAA,YAAAA,EAAMkB,UAANlB,YAAAA,EAAeuB,oBAAqB,EAAE,CAC9C"}