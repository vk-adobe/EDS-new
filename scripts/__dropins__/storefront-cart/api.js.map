{"version":3,"file":"api.js","sources":["../src/api/addProductsToCart/graphql/AddProductsToCartMutation.ts","../src/api/addProductsToCart/addProductsToCart.ts","../src/api/createEmptyCart/graphql/CreateCartMutation.ts","../src/api/createEmptyCart/createEmptyCart.ts"],"sourcesContent":["import { CART_FRAGMENT, CART_ITEMS_PAGINATION_ARGUMENTS } from '@/cart/api/graphql/CartFragment';\n\nexport const ADD_PRODUCTS_TO_CART_MUTATION = `\n  mutation ADD_PRODUCTS_TO_CART_MUTATION(\n      $cartId: String!, \n      $cartItems: [CartItemInput!]!,\n      ${CART_ITEMS_PAGINATION_ARGUMENTS}\n    ) {\n    addProductsToCart(\n      cartId: $cartId\n      cartItems: $cartItems\n    ) {\n      cart {\n        ...CartFragment\n      }\n      user_errors {\n        code\n        message\n      }\n    }\n  }\n  ${CART_FRAGMENT}\n`;\n","import { fetchGraphQl, createEmptyCart } from '@/cart/api';\nimport { state } from '@/cart/lib/state';\nimport { CartModel } from '@/cart/data/models';\nimport { transformCart } from '@/cart/data/transforms';\nimport { events } from '@adobe/event-bus';\nimport { handleFetchError } from '@/cart/lib/fetch-error';\n\nimport { ADD_PRODUCTS_TO_CART_MUTATION } from './graphql/AddProductsToCartMutation';\nimport { publishCartUpdateEvents, publishOpenCartEvent } from '@/cart/lib/acdl';\n\nexport const addProductsToCart = async (\n  items: {\n    sku: string;\n    parentSku?: string;\n    quantity: number;\n    optionsUIDs?: string[];\n    enteredOptions?: { uid: string; value: string }[];\n  }[]\n): Promise<CartModel | null> => {\n  let isNewCart = false;\n\n  const cartId =\n    state.cartId ||\n    (await createEmptyCart().then((id) => {\n      isNewCart = true;\n      return id;\n    }));\n\n  return fetchGraphQl(ADD_PRODUCTS_TO_CART_MUTATION, {\n    variables: {\n      cartId,\n      cartItems: items.map(\n        ({\n          sku,\n          parentSku: parent_sku,\n          quantity,\n          optionsUIDs: selected_options,\n          enteredOptions: entered_options,\n        }) => ({\n          sku,\n          parent_sku,\n          quantity,\n          selected_options,\n          entered_options,\n        })\n      ),\n    },\n  }).then(({ errors, data }) => {\n    if (errors) return handleFetchError(errors);\n\n    const payload = transformCart(data.addProductsToCart.cart);\n\n    events.emit('cart/updated', payload);\n    events.emit('cart/data', payload);\n\n    if (payload) {\n      const updatedItems = payload.items.filter((item) =>\n        items.some(({ sku }) => sku === item.sku)\n      );\n      if (isNewCart) {\n        // Publish open cart event when the first item is added to the cart\n        publishOpenCartEvent(payload, updatedItems, state.locale || 'en-US');\n      } else {\n        // Otherwise publish cart update events\n        publishCartUpdateEvents(payload, updatedItems, state.locale || 'en-US');\n      }\n    }\n\n    return payload;\n  });\n};\n","export const CREATE_EMPTY_CART_MUTATION = `\n    mutation CREATE_EMPTY_CART_MUTATION {\n        createEmptyCart\n    }\n`;\n","import { config, fetchGraphQl } from '@/cart/api';\nimport { state } from '@/cart/lib/state';\n\nimport { CREATE_EMPTY_CART_MUTATION } from './graphql/CreateCartMutation';\n\nexport const createEmptyCart = async () => {\n  const { disableGuestCart } = config.getConfig();\n\n  // If guest cart is disabled, throw an error\n  if (disableGuestCart) {\n    throw new Error('Guest cart is disabled');\n  }\n\n  // Return new empty cart id\n  return await fetchGraphQl(CREATE_EMPTY_CART_MUTATION).then(({ data }) => {\n    const cartId = data.createEmptyCart;\n\n    // Set cart id in state\n    state.cartId = cartId;\n\n    return cartId;\n  });\n};\n"],"names":["ADD_PRODUCTS_TO_CART_MUTATION","CART_ITEMS_PAGINATION_ARGUMENTS","CART_FRAGMENT","addProductsToCart","items","isNewCart","cartId","state","createEmptyCart","then","id","fetchGraphQl","variables","cartItems","map","sku","parentSku","parent_sku","quantity","optionsUIDs","selected_options","enteredOptions","entered_options","errors","data","handleFetchError","payload","transformCart","cart","emit","updatedItems","filter","some","item","publishOpenCartEvent","locale","publishCartUpdateEvents","CREATE_EMPTY_CART_MUTATION","disableGuestCart","config","getConfig","Error"],"mappings":"mbAEO,MAAMA,EAAiC;AAAA;AAAA;AAAA;AAAA,QAItCC,CAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAepCC,CAAc;AAAA,ECXLC,EAAoB,MAC/BC,GAO8B,CAC9B,IAAIC,EAAY,GAEhB,MAAMC,EACJC,EAAMD,QACL,MAAME,IAAkBC,KAAaC,IACxBL,EAAA,GACLK,EACR,EAEH,OAAOC,EAAaX,EAA+B,CACjDY,UAAW,CACTN,OAAAA,EACAO,UAAWT,EAAMU,IACf,CAAC,CACCC,IAAAA,EACAC,UAAWC,EACXC,SAAAA,EACAC,YAAaC,EACbC,eAAgBC,CAAAA,KACX,CACLP,IAAAA,EACAE,WAAAA,EACAC,SAAAA,EACAE,iBAAAA,EACAE,gBAAAA,CAAAA,EAEJ,CACF,CAAA,CACD,EAAEb,KAAK,CAAC,CAAEc,OAAAA,EAAQC,KAAAA,CAAAA,IAAW,CACxBD,GAAAA,EAAQ,OAAOE,EAAiBF,CAAM,EAE1C,MAAMG,EAAUC,EAAcH,EAAKrB,kBAAkByB,IAAI,EAKzD,GAHOC,EAAAA,KAAK,eAAgBH,CAAO,EAC5BG,EAAAA,KAAK,YAAaH,CAAO,EAE5BA,EAAS,CACX,MAAMI,EAAeJ,EAAQtB,MAAM2B,OACjC3B,GAAAA,EAAM4B,KAAK,CAAC,CAAEjB,IAAAA,CAAUA,IAAAA,IAAQkB,EAAKlB,GAAG,CAC1C,EACIV,EAEF6B,EAAqBR,EAASI,EAAcvB,EAAM4B,QAAU,OAAO,EAGnEC,EAAwBV,EAASI,EAAcvB,EAAM4B,QAAU,OAAO,CAE1E,CAEOT,OAAAA,CAAAA,CACR,CACH,ECtEaW,EAA8B;AAAA;AAAA;AAAA;AAAA,ECK9B7B,EAAkB,SAAY,CACnC,KAAA,CAAE8B,iBAAAA,CAAAA,EAAqBC,EAAOC,YAGpC,GAAIF,EACI,MAAA,IAAIG,MAAM,wBAAwB,EAI1C,OAAO,MAAM9B,EAAa0B,CAA0B,EAAE5B,KAAK,CAAC,CAAEe,KAAAA,CAAAA,IAAW,CACvE,MAAMlB,EAASkB,EAAKhB,gBAGpBD,OAAAA,EAAMD,OAASA,EAERA,CAAAA,CACR,CACH"}